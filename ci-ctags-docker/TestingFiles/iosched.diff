appname iosched
version iosched 1.0
commit 75f57386d7ab10d3de4d7f25b07d9a4e76d2043d
tree 13172859cc7252462f34f7270a04afde0c3ca187
parent 1d0c6c9221487f2dda76062d176f03747c8736a1
author Alexey Karataev <35783149+akarataev@users.noreply.github.com> 1561016268 +0300
committer Benjamin Baxter <benbaxter@google.com> 1561016268 +0200

    Add benchmark testing module
    
    Added LoadAgendaUseCaseBenchmark to test the benchmarking flow.
    
    Test=LoadAgendaUseCaseBenchmark
    BUG=148408986
    
    Change-Id: I92ef8c3e52aa81c2ebc8cf87e5b54cad1a8ee3e8

diff --git a/benchmark/build.gradle.kts b/benchmark/build.gradle.kts
new file mode 100644
index 000000000..2746d2338
--- /dev/null
+++ b/benchmark/build.gradle.kts
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2020 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+plugins {
+    id("com.android.library")
+    kotlin("android")
+    kotlin("android.extensions")
+    id("androidx.benchmark")
+    kotlin("kapt")
+}
+
+android {
+    compileSdkVersion(Versions.COMPILE_SDK)
+    defaultConfig {
+        minSdkVersion(Versions.MIN_SDK)
+        targetSdkVersion(Versions.TARGET_SDK)
+        versionCode = 1
+        versionName = "1.0"
+        testInstrumentationRunner = "androidx.benchmark.junit4.AndroidBenchmarkRunner"
+    }
+
+    buildTypes {
+        maybeCreate("staging")
+        getByName("staging") {
+            initWith(getByName("debug"))
+            isDefault = true
+            versionNameSuffix = "-staging"
+            isMinifyEnabled = true
+            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"))
+
+            // Specifies a sorted list of fallback build types that the
+            // plugin should try to use when a dependency does not include a
+            // "staging" build type.
+            // Used with :test-shared, which doesn't have a staging variant.
+            matchingFallbacks = listOf("debug")
+        }
+    }
+
+    testBuildType = "staging"
+
+    // To avoid the compile error from benchmarkRule.measureRepeated
+    // Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM
+    // target 1.6
+    kotlinOptions.jvmTarget = "1.8"
+}
+
+dependencies {
+    androidTestImplementation(platform(project(":depconstraints")))
+    kapt(platform(project(":depconstraints")))
+    androidTestImplementation(project(":model"))
+    androidTestImplementation(project(":shared"))
+    androidTestImplementation(project(":test-shared"))
+    androidTestImplementation(project(":androidTest-shared"))
+
+    // ThreeTenBP is for Date and time API for Java.
+    androidTestImplementation(Libs.THREETENABP)
+
+    // Instrumentation tests
+    androidTestImplementation(Libs.HAMCREST)
+    androidTestImplementation(Libs.EXT_JUNIT)
+    androidTestImplementation(Libs.RUNNER)
+    androidTestImplementation(Libs.RULES)
+
+    // Benchmark testing
+    androidTestImplementation(Libs.BENCHMARK)
+}
diff --git a/benchmark/src/androidTest/AndroidManifest.xml b/benchmark/src/androidTest/AndroidManifest.xml
new file mode 100644
index 000000000..c47da1375
--- /dev/null
+++ b/benchmark/src/androidTest/AndroidManifest.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright 2020 Google LLC
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     https://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.google.samples.apps.iosched.benchmark">
+
+    <!-- Important: disable debuggable for accurate performance results. -->
+    <application
+        android:debuggable="false"
+        tools:ignore="HardcodedDebugMode"
+        tools:replace="android:debuggable" />
+
+</manifest>
diff --git a/benchmark/src/androidTest/java/com/google/samples/apps/iosched/benchmark/LoadAgendaUseCaseBenchmark.kt b/benchmark/src/androidTest/java/com/google/samples/apps/iosched/benchmark/LoadAgendaUseCaseBenchmark.kt
new file mode 100644
index 000000000..9a01d085d
--- /dev/null
+++ b/benchmark/src/androidTest/java/com/google/samples/apps/iosched/benchmark/LoadAgendaUseCaseBenchmark.kt
@@ -0,0 +1,71 @@
+/*
+ * Copyright 2020 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.samples.apps.iosched.benchmark
+
+import androidx.benchmark.junit4.BenchmarkRule
+import androidx.benchmark.junit4.measureRepeated
+import androidx.test.core.app.ApplicationProvider
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import com.google.samples.apps.iosched.model.Block
+import com.google.samples.apps.iosched.shared.data.FakeAppConfigDataSource
+import com.google.samples.apps.iosched.shared.data.agenda.DefaultAgendaRepository
+import com.google.samples.apps.iosched.shared.domain.agenda.LoadAgendaUseCase
+import com.google.samples.apps.iosched.shared.result.Result
+import com.google.samples.apps.iosched.shared.result.data
+import com.google.samples.apps.iosched.shared.result.succeeded
+import com.google.samples.apps.iosched.test.data.MainCoroutineRule
+import com.jakewharton.threetenabp.AndroidThreeTen
+import kotlinx.coroutines.test.runBlockingTest
+import org.hamcrest.MatcherAssert.assertThat
+import org.hamcrest.collection.IsCollectionWithSize.hasSize
+import org.hamcrest.core.Is.`is`
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+
+/**
+ * Simple benchmark test for loading the agenda. To keep startup times optimized, this benchmark
+ * test is used to monitor potential hot spots when the app first loads content.
+ */
+@RunWith(AndroidJUnit4::class)
+class LoadAgendaUseCaseBenchmark {
+    @get:Rule
+    val benchmarkRule = BenchmarkRule()
+
+    @get:Rule
+    var coroutineRule = MainCoroutineRule()
+
+    @Test
+    fun loadAgendaUseCase() {
+        AndroidThreeTen.init(ApplicationProvider.getApplicationContext())
+        // Using FakeAppConfigDataSource to stub out the network call to Firebase's remote config.
+        // The repository and useCase do not perform any caching so the creation of the useCase
+        // occurs before measuring to focus the benchmark on the creation of the agenda.
+        val useCase = LoadAgendaUseCase(
+            DefaultAgendaRepository(FakeAppConfigDataSource()),
+            coroutineRule.testDispatcher)
+
+        benchmarkRule.measureRepeated {
+            coroutineRule.testDispatcher.runBlockingTest {
+                val result: Result<List<Block>> = useCase.invoke(parameters = true)
+
+                assertThat(result.succeeded, `is`(true))
+                assertThat(result.data, hasSize(29))
+            }
+        }
+    }
+}
diff --git a/benchmark/src/main/AndroidManifest.xml b/benchmark/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..fae397c27
--- /dev/null
+++ b/benchmark/src/main/AndroidManifest.xml
@@ -0,0 +1,18 @@
+<!--
+  ~ Copyright 2020 Google LLC
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     https://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.google.samples.apps.iosched.benchmark" />
diff --git a/build.gradle.kts b/build.gradle.kts
index 1d3c94df0..777bef922 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,107 +1,108 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 // Top-level build file where you can add configuration options common to all
 // sub-projects/modules.
 import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
 
 buildscript {
 
     repositories {
         google()
         mavenCentral()
         jcenter()
         maven { url = uri("https://maven.fabric.io/public") }
         // Android Build Server
         maven { url = uri("../iosched-prebuilts/m2repository") }
     }
     dependencies {
         classpath("com.android.tools.build:gradle:${Versions.ANDROID_GRADLE_PLUGIN}")
         classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.KOTLIN}")
         classpath("com.google.gms:google-services:${Versions.GOOGLE_SERVICES}")
+        classpath("androidx.benchmark:benchmark-gradle-plugin:${Versions.BENCHMARK}")
         classpath("androidx.navigation:navigation-safe-args-gradle-plugin:${Versions.NAVIGATION}")
         classpath("io.fabric.tools:gradle:${Versions.FABRIC}")
     }
 }
 
 plugins {
     id("com.diffplug.gradle.spotless") version "3.27.1"
 }
 
 allprojects {
     repositories {
         google()
         mavenCentral()
         jcenter()
 
         // For Android Build Server
         // - Material Design Components
         maven { url = uri("${project.rootDir}/../iosched-prebuilts/repository") }
         // - Other dependencies
         maven { url = uri("${project.rootDir}/../iosched-prebuilts/m2repository") }
         // - Support Libraries, etc
         maven {
             url = uri("${project.rootDir}/../../../prebuilts/fullsdk/linux/extras/support/m2repository")
         }
 
         flatDir {
             dirs = setOf(file("libs"), project(":ar").file("libs"))
         }
     }
 }
 
 subprojects {
     apply(plugin = "com.diffplug.gradle.spotless")
     val ktlintVer = "0.36.0"
     spotless {
         kotlin {
             target("**/*.kt")
             ktlint(ktlintVer).userData(
                 mapOf("max_line_length" to "100", "disabled_rules" to "import-ordering")
             )
             licenseHeaderFile(project.rootProject.file("copyright.kt"))
         }
         kotlinGradle {
             // same as kotlin, but for .gradle.kts files (defaults to '*.gradle.kts')
             target("**/*.gradle.kts")
             ktlint(ktlintVer)
             licenseHeaderFile(project.rootProject.file("copyright.kt"), "(plugins |import |include)")
         }
     }
 
     // `spotlessCheck` runs when a build includes `check`, notably during presubmit. In these cases
     // we prefer `spotlessCheck` run as early as possible since it fails in seconds. This prevents a
     // build from running for several minutes doing other intensive tasks (resource processing, code
     // generation, compilation, etc) only to fail on a formatting nit.
     // Using `mustRunAfter` avoids creating a task dependency. The order is enforced only if
     // `spotlessCheck` is already scheduled to run, so we can still build and launch from the IDE
     // while the code is "dirty".
     tasks.whenTaskAdded {
         if (name == "preBuild") {
             mustRunAfter("spotlessCheck")
         }
     }
 
     // TODO: Remove when the Coroutine and Flow APIs leave experimental/internal/preview.
     tasks.withType<KotlinCompile>().configureEach {
         kotlinOptions.freeCompilerArgs +=
             "-Xuse-experimental=" +
                 "kotlin.Experimental," +
                 "kotlinx.coroutines.ExperimentalCoroutinesApi," +
                 "kotlinx.coroutines.InternalCoroutinesApi," +
                 "kotlinx.coroutines.FlowPreview"
     }
 }
diff --git a/buildSrc/src/main/java/Libs.kt b/buildSrc/src/main/java/Libs.kt
index cebef8420..bc76e5cd0 100644
--- a/buildSrc/src/main/java/Libs.kt
+++ b/buildSrc/src/main/java/Libs.kt
@@ -1,77 +1,78 @@
 /*
  * Copyright 2020 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 object Libs {
     const val ACTIVITY_KTX = "androidx.activity:activity-ktx"
     const val APPCOMPAT = "androidx.appcompat:appcompat"
     const val ARCH_TESTING = "androidx.arch.core:core-testing"
     const val ARCORE = "com.google.ar:core"
+    const val BENCHMARK = "androidx.benchmark:benchmark-junit4"
     const val BROWSER = "androidx.browser:browser"
     const val CARDVIEW = "androidx.cardview:cardview"
     const val CONSTRAINT_LAYOUT = "androidx.constraintlayout:constraintlayout"
     const val CORE_KTX = "androidx.core:core-ktx"
     const val CRASHLYTICS = "com.crashlytics.sdk.android:crashlytics"
     const val COROUTINES = "org.jetbrains.kotlinx:kotlinx-coroutines-core"
     const val COROUTINES_TEST = "org.jetbrains.kotlinx:kotlinx-coroutines-test"
     const val DAGGER_ANDROID = "com.google.dagger:dagger-android"
     const val DAGGER_ANDROID_PROCESSOR = "com.google.dagger:dagger-android-processor"
     const val DAGGER_ANDROID_SUPPORT = "com.google.dagger:dagger-android-support"
     const val DAGGER_COMPILER = "com.google.dagger:dagger-compiler"
     const val DRAWER_LAYOUT = "androidx.drawerlayout:drawerlayout"
     const val ESPRESSO_CONTRIB = "androidx.test.espresso:espresso-contrib"
     const val ESPRESSO_CORE = "androidx.test.espresso:espresso-core"
     const val EXT_JUNIT = "androidx.test.ext:junit"
     const val FIREBASE_ANALYTICS = "com.google.firebase:firebase-analytics-ktx"
     const val FIREBASE_AUTH = "com.google.firebase:firebase-auth-ktx"
     const val FIREBASE_CONFIG = "com.google.firebase:firebase-config-ktx"
     const val FIREBASE_FIRESTORE = "com.google.firebase:firebase-firestore-ktx"
     const val FIREBASE_FUNCTIONS = "com.google.firebase:firebase-functions-ktx"
     const val FIREBASE_MESSAGING = "com.google.firebase:firebase-messaging"
     const val FIREBASE_UI_AUTH = "com.firebaseui:firebase-ui-auth"
     const val FLEXBOX = "com.google.android:flexbox"
     const val FRAGMENT_KTX = "androidx.fragment:fragment-ktx"
     const val GLIDE = "com.github.bumptech.glide:glide"
     const val GLIDE_COMPILER = "com.github.bumptech.glide:compiler"
     const val GOOGLE_MAP_UTILS = "com.google.maps.android:android-maps-utils"
     const val GOOGLE_PLAY_SERVICES_MAPS = "com.google.android.gms:play-services-maps"
     const val GOOGLE_PLAY_SERVICES_VISION = "com.google.android.gms:play-services-vision"
     const val GSON = "com.google.code.gson:gson"
     const val HAMCREST = "org.hamcrest:hamcrest-library"
     const val INK_PAGE_INDICATOR = "com.pacioianu.david:ink-page-indicator"
     const val JUNIT = "junit:junit"
     const val KOTLIN_STDLIB = "org.jetbrains.kotlin:kotlin-stdlib-jdk7"
     const val LIFECYCLE_COMPILER = "androidx.lifecycle:lifecycle-compiler"
     const val LIFECYCLE_LIVE_DATA_KTX = "androidx.lifecycle:lifecycle-livedata-ktx"
     const val LIFECYCLE_VIEW_MODEL_KTX = "androidx.lifecycle:lifecycle-viewmodel-ktx"
     const val LOTTIE = "com.airbnb.android:lottie"
     const val MATERIAL = "com.google.android.material:material"
     const val MOCKITO_CORE = "org.mockito:mockito-core"
     const val MOCKITO_KOTLIN = "com.nhaarman:mockito-kotlin"
     const val NAVIGATION_FRAGMENT_KTX = "androidx.navigation:navigation-fragment-ktx"
     const val NAVIGATION_UI_KTX = "androidx.navigation:navigation-ui-ktx"
     const val OKHTTP = "com.squareup.okhttp3:okhttp"
     const val OKHTTP_LOGGING_INTERCEPTOR = "com.squareup.okhttp3:logging-interceptor"
     const val OKIO = "com.squareup.okio:okio"
     const val ROOM_COMPILER = "androidx.room:room-compiler"
     const val ROOM_KTX = "androidx.room:room-ktx"
     const val ROOM_RUNTIME = "androidx.room:room-runtime"
     const val RULES = "androidx.test:rules"
     const val RUNNER = "androidx.test:runner"
     const val THREETENABP = "com.jakewharton.threetenabp:threetenabp"
     const val THREETENBP = "org.threeten:threetenbp"
     const val TIMBER = "com.jakewharton.timber:timber"
     const val VIEWPAGER2 = "androidx.viewpager2:viewpager2"
 }
diff --git a/buildSrc/src/main/java/Versions.kt b/buildSrc/src/main/java/Versions.kt
index bffad98e7..48341d877 100644
--- a/buildSrc/src/main/java/Versions.kt
+++ b/buildSrc/src/main/java/Versions.kt
@@ -1,38 +1,39 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 object Versions {
     val versionName = "7.0.15" // X.Y.Z; X = Major, Y = minor, Z = Patch level
     private val versionCodeBase = 70150 // XYYZZM; M = Module (tv, mobile)
     val versionCodeMobile = versionCodeBase + 3
 
     const val COMPILE_SDK = 29
     const val TARGET_SDK = 29
     const val MIN_SDK = 21
 
     // Versions that are used for classpath (and library) dependencies
     // b/146592586 prevents updating the AGP to 4.0
     const val ANDROID_GRADLE_PLUGIN = "4.0.0-rc01"
+    const val BENCHMARK = "1.0.0"
     const val FABRIC = "1.31.2"
     const val GOOGLE_SERVICES = "4.3.3"
     const val KOTLIN = "1.3.70"
     const val NAVIGATION = "2.2.0"
 
     // TODO: Remove this once the version for
     //  "org.threeten:threetenbp:${Versions.threetenbp}:no-tzdb" using java-platform in the
     //  depconstraints/build.gradle.kts is defined
     const val THREETENBP = "1.3.6"
 }
diff --git a/depconstraints/build.gradle.kts b/depconstraints/build.gradle.kts
index 16b6ad2a6..c1c2e1c45 100644
--- a/depconstraints/build.gradle.kts
+++ b/depconstraints/build.gradle.kts
@@ -1,139 +1,141 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 plugins {
     id("java-platform")
     id("maven-publish")
 }
 
 val appcompat = "1.1.0-beta01"
 val activity = "1.0.0-beta01"
 val cardview = "1.0.0"
 val archTesting = "2.0.0"
 val arcore = "1.7.0"
+val benchmark = "1.0.0"
 val browser = "1.0.0"
 val constraintLayout = "1.1.3"
 val core = "1.2.0"
 val coroutines = "1.3.4"
 val coroutinesTest = "1.3.4"
 val crashlytics = "2.9.8"
 val dagger = "2.26"
 val drawerLayout = "1.1.0-beta01"
 val espresso = "3.1.1"
 val firebaseAnalytics = "17.4.0"
 val firebaseAuth = "19.3.1"
 val firebaseConfig = "19.1.4"
 val firebaseFirestore = "21.4.3"
 val firebaseFunctions = "19.0.2"
 val firebaseMessaging = "20.1.6"
 val firebaseUi = "4.0.0"
 val flexbox = "1.1.0"
 val fragment = "1.1.0-beta01"
 val glide = "4.9.0"
 val googleMapUtils = "0.5"
 val googlePlayServicesMaps = "16.0.0"
 val googlePlayServicesVision = "17.0.2"
 val gson = "2.8.6"
 val hamcrest = "1.3"
 val junit = "4.12"
 val junitExt = "1.1.1"
 val lifecycle = "2.2.0"
 val lottie = "3.0.0"
 val material = "1.1.0"
 val mockito = "3.3.1"
 val mockitoKotlin = "1.5.0"
 val okhttp = "3.10.0"
 val okio = "1.14.0"
 val pageIndicator = "1.3.0"
 val playCore = "1.6.5"
 val room = "2.2.5"
 val rules = "1.1.1"
 val runner = "1.2.0"
 val threetenabp = "1.0.5"
 val timber = "4.7.1"
 val viewpager2 = "1.0.0"
 
 dependencies {
     constraints {
         api("${Libs.ACTIVITY_KTX}:$activity")
         api("${Libs.APPCOMPAT}:$appcompat")
         api("${Libs.CARDVIEW}:$cardview")
         api("${Libs.ARCH_TESTING}:$archTesting")
         api("${Libs.ARCORE}:$arcore")
+        api("${Libs.BENCHMARK}:$benchmark")
         api("${Libs.BROWSER}:$browser")
         api("${Libs.CONSTRAINT_LAYOUT}:$constraintLayout")
         api("${Libs.CORE_KTX}:$core")
         api("${Libs.COROUTINES}:$coroutines")
         api("${Libs.COROUTINES_TEST}:$coroutines")
         api("${Libs.CRASHLYTICS}:$crashlytics")
         api("${Libs.DAGGER_ANDROID}:$dagger")
         api("${Libs.DAGGER_ANDROID_SUPPORT}:$dagger")
         api("${Libs.DAGGER_COMPILER}:$dagger")
         api("${Libs.DAGGER_ANDROID_PROCESSOR}:$dagger")
         api("${Libs.DRAWER_LAYOUT}:$drawerLayout")
         api("${Libs.ESPRESSO_CORE}:$espresso")
         api("${Libs.ESPRESSO_CONTRIB}:$espresso")
         api("${Libs.FIREBASE_AUTH}:$firebaseAuth")
         api("${Libs.FIREBASE_CONFIG}:$firebaseConfig")
         api("${Libs.FIREBASE_ANALYTICS}:$firebaseAnalytics")
         api("${Libs.FIREBASE_FIRESTORE}:$firebaseFirestore")
         api("${Libs.FIREBASE_FUNCTIONS}:$firebaseFunctions")
         api("${Libs.FIREBASE_MESSAGING}:$firebaseMessaging")
         api("${Libs.FIREBASE_UI_AUTH}:$firebaseUi")
         api("${Libs.FLEXBOX}:$flexbox")
         api("${Libs.FRAGMENT_KTX}:$fragment")
         api("${Libs.GLIDE}:$glide")
         api("${Libs.GLIDE_COMPILER}:$glide")
         api("${Libs.GOOGLE_MAP_UTILS}:$googleMapUtils")
         api("${Libs.GOOGLE_PLAY_SERVICES_MAPS}:$googlePlayServicesMaps")
         api("${Libs.GOOGLE_PLAY_SERVICES_VISION}:$googlePlayServicesVision")
         api("${Libs.GSON}:$gson")
         api("${Libs.HAMCREST}:$hamcrest")
         api("${Libs.JUNIT}:$junit")
         api("${Libs.EXT_JUNIT}:$junitExt")
         api("${Libs.KOTLIN_STDLIB}:${Versions.KOTLIN}")
         api("${Libs.LIFECYCLE_COMPILER}:$lifecycle")
         api("${Libs.LIFECYCLE_LIVE_DATA_KTX}:$lifecycle")
         api("${Libs.LIFECYCLE_VIEW_MODEL_KTX}:$lifecycle")
         api("${Libs.LOTTIE}:$lottie")
         api("${Libs.MATERIAL}:$material")
         api("${Libs.MOCKITO_CORE}:$mockito")
         api("${Libs.MOCKITO_KOTLIN}:$mockitoKotlin")
         api("${Libs.NAVIGATION_FRAGMENT_KTX}:${Versions.NAVIGATION}")
         api("${Libs.NAVIGATION_UI_KTX}:${Versions.NAVIGATION}")
         api("${Libs.ROOM_KTX}:$room")
         api("${Libs.ROOM_RUNTIME}:$room")
         api("${Libs.ROOM_COMPILER}:$room")
         api("${Libs.OKHTTP}:$okhttp")
         api("${Libs.OKHTTP_LOGGING_INTERCEPTOR}:$okhttp")
         api("${Libs.OKIO}:$okio")
         api("${Libs.INK_PAGE_INDICATOR}:$pageIndicator")
         api("${Libs.RULES}:$rules")
         api("${Libs.RUNNER}:$runner")
         api("${Libs.THREETENABP}:$threetenabp")
         api("${Libs.THREETENBP}:${Versions.THREETENBP}")
         api("${Libs.TIMBER}:$timber")
         api("${Libs.VIEWPAGER2}:$viewpager2")
     }
 }
 
 publishing {
     publications {
         create<MavenPublication>("myPlatform") {
             from(components["javaPlatform"])
         }
     }
 }
diff --git a/settings.gradle.kts b/settings.gradle.kts
index 48f80b2a7..785ddd115 100644
--- a/settings.gradle.kts
+++ b/settings.gradle.kts
@@ -1,17 +1,26 @@
 /*
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-include(":mobile", ":shared", ":test-shared", ":model", ":androidTest-shared", "ar", "depconstraints")
+include(
+  ":mobile",
+  ":shared",
+  ":test-shared",
+  ":model",
+  ":androidTest-shared",
+  "ar",
+  "benchmark",
+  "depconstraints"
+)

commit f3b1161bba89d520806d37d6c92b0b7350b780e6
tree 13172859cc7252462f34f7270a04afde0c3ca187
parent 1d0c6c9221487f2dda76062d176f03747c8736a1
author Tiem Song <tiem@google.com> 1561016268 +0300
committer Joan Disho <dishojoan@gmail.com> 1561016268 +0200
    Update to AGP 4.0.0-rc01
    
    Reflects latest Studio version.
    
    Also replace deprecated data binding declaration
    
    Test: kokoro + verify app runs
    Change-Id: I3bbd6dfec5d56c256d54808564252c2e73e6ac9b

diff --git a/buildSrc/src/main/java/Versions.kt b/buildSrc/src/main/java/Versions.kt
index de0a596f3..bffad98e7 100644
--- a/buildSrc/src/main/java/Versions.kt
+++ b/buildSrc/src/main/java/Versions.kt
@@ -1,38 +1,38 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 object Versions {
     val versionName = "7.0.15" // X.Y.Z; X = Major, Y = minor, Z = Patch level
     private val versionCodeBase = 70150 // XYYZZM; M = Module (tv, mobile)
     val versionCodeMobile = versionCodeBase + 3
 
     const val COMPILE_SDK = 29
     const val TARGET_SDK = 29
     const val MIN_SDK = 21
 
     // Versions that are used for classpath (and library) dependencies
     // b/146592586 prevents updating the AGP to 4.0
-    const val ANDROID_GRADLE_PLUGIN = "4.0.0-beta05"
+    const val ANDROID_GRADLE_PLUGIN = "4.0.0-rc01"
     const val FABRIC = "1.31.2"
     const val GOOGLE_SERVICES = "4.3.3"
     const val KOTLIN = "1.3.70"
     const val NAVIGATION = "2.2.0"
 
     // TODO: Remove this once the version for
     //  "org.threeten:threetenbp:${Versions.threetenbp}:no-tzdb" using java-platform in the
     //  depconstraints/build.gradle.kts is defined
     const val THREETENBP = "1.3.6"
 }
diff --git a/mobile/build.gradle.kts b/mobile/build.gradle.kts
index 19ce5b053..b4d78087f 100644
--- a/mobile/build.gradle.kts
+++ b/mobile/build.gradle.kts
@@ -1,223 +1,224 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 plugins {
     id("com.android.application")
     kotlin("android")
     kotlin("android.extensions")
     kotlin("kapt")
     id("androidx.navigation.safeargs.kotlin")
     id("io.fabric")
 }
 
 android {
     compileSdkVersion(Versions.COMPILE_SDK)
     defaultConfig {
         applicationId = "com.google.samples.apps.iosched"
         minSdkVersion(Versions.MIN_SDK)
         targetSdkVersion(Versions.TARGET_SDK)
         versionCode = Versions.versionCodeMobile
         versionName = Versions.versionName
         testInstrumentationRunner = "com.google.samples.apps.iosched.tests.CustomTestRunner"
 
         buildConfigField("com.google.android.gms.maps.model.LatLng",
                 "MAP_VIEWPORT_BOUND_NE",
                 "new com.google.android.gms.maps.model.LatLng(${properties["map_viewport_bound_ne"]})")
         buildConfigField("com.google.android.gms.maps.model.LatLng",
                 "MAP_VIEWPORT_BOUND_SW",
                 "new com.google.android.gms.maps.model.LatLng(${properties["map_viewport_bound_sw"]})")
 
         buildConfigField("float", "MAP_CAMERA_FOCUS_ZOOM", properties["map_camera_focus_zoom"] as String)
 
         resValue("dimen", "map_camera_bearing", properties["map_default_camera_bearing"] as String)
         resValue("dimen", "map_camera_target_lat", properties["map_default_camera_target_lat"] as String)
         resValue("dimen", "map_camera_target_lng", properties["map_default_camera_target_lng"] as String)
         resValue("dimen", "map_camera_tilt", properties["map_default_camera_tilt"] as String)
         resValue("dimen", "map_camera_zoom", properties["map_default_camera_zoom"] as String)
         resValue("dimen", "map_viewport_min_zoom", properties["map_viewport_min_zoom"] as String)
         resValue("dimen", "map_viewport_max_zoom", properties["map_viewport_max_zoom"] as String)
 
         manifestPlaceholders = mapOf("crashlyticsEnabled" to true)
 
         vectorDrawables.useSupportLibrary = true
 
         javaCompileOptions {
             annotationProcessorOptions {
                 arguments["room.incremental"] = "true"
             }
         }
     }
     buildTypes {
         getByName("release") {
             isMinifyEnabled = true
             // TODO: b/120517460 shrinkResource can't be used with dynamic-feature at this moment.
             //       Need to ensure the app size has not increased
             manifestPlaceholders = mapOf("crashlyticsEnabled" to true)
             proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
             resValue("string",
                     "google_maps_key",
                     "AIzaSyD5jqwKMm1SeoYsW25vxCXfTlhDBeZ4H5c")
 
             buildConfigField("String", "MAP_TILE_URL_BASE", "\"https://storage.googleapis.com/io2019-festivus-prod/images/maptiles\"")
         }
         getByName("debug") {
             versionNameSuffix = "-debug"
             manifestPlaceholders = mapOf("crashlyticsEnabled" to false)
             resValue("string",
                     "google_maps_key",
                     "AIzaSyAhJx57ikQH9rYc8IT8W3d2As5cGHMBvuo")
 
             buildConfigField("String", "MAP_TILE_URL_BASE", "\"https://storage.googleapis.com/io2019-festivus/images/maptiles\"")
         }
         maybeCreate("staging")
         getByName("staging") {
             initWith(getByName("debug"))
             versionNameSuffix = "-staging"
 
             // Specifies a sorted list of fallback build types that the
             // plugin should try to use when a dependency does not include a
             // "staging" build type.
             // Used with :test-shared, which doesn't have a staging variant.
             matchingFallbacks = listOf("debug")
         }
     }
-    dataBinding {
-        isEnabled = true
+
+    buildFeatures {
+        dataBinding = true
     }
 
     signingConfigs {
         // We need to sign debug builds with a debug key to make firebase auth happy
         getByName("debug") {
             storeFile = file("../debug.keystore")
             keyAlias = "androiddebugkey"
             keyPassword = "android"
             storePassword = "android"
         }
     }
 
     // debug and release variants share the same source dir
     sourceSets {
         getByName("debug") {
             java.srcDir("src/debugRelease/java")
         }
         getByName("release") {
             java.srcDir("src/debugRelease/java")
         }
     }
 
     lintOptions {
         // Eliminates UnusedResources false positives for resources used in DataBinding layouts
         isCheckGeneratedSources = true
         // Running lint over the debug variant is enough
         isCheckReleaseBuilds = false
         // See lint.xml for rules configuration
     }
 
     testBuildType = "staging"
 
     // Required for AR because it includes a library built with Java 8
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_1_8
         targetCompatibility = JavaVersion.VERSION_1_8
     }
     // To avoid the compile error: "Cannot inline bytecode built with JVM target 1.8
     // into bytecode that is being built with JVM target 1.6"
     kotlinOptions {
         val options = this as org.jetbrains.kotlin.gradle.dsl.KotlinJvmOptions
         options.jvmTarget = "1.8"
     }
 }
 
 dependencies {
     api(platform(project(":depconstraints")))
     kapt(platform(project(":depconstraints")))
 
     implementation(project(":shared"))
     implementation(project(":ar"))
     testImplementation(project(":test-shared"))
     testImplementation(project(":androidTest-shared"))
     implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))
 
     implementation(Libs.CORE_KTX)
 
     // UI
     implementation(Libs.ACTIVITY_KTX)
     implementation(Libs.APPCOMPAT)
     implementation(Libs.FRAGMENT_KTX)
     implementation(Libs.CARDVIEW)
     implementation(Libs.BROWSER)
     implementation(Libs.CONSTRAINT_LAYOUT)
     implementation(Libs.DRAWER_LAYOUT)
     implementation(Libs.MATERIAL)
     implementation(Libs.FLEXBOX)
     implementation(Libs.LOTTIE)
     implementation(Libs.INK_PAGE_INDICATOR)
 
     // Architecture Components
     implementation(Libs.LIFECYCLE_LIVE_DATA_KTX)
     kapt(Libs.LIFECYCLE_COMPILER)
     testImplementation(Libs.ARCH_TESTING)
     implementation(Libs.NAVIGATION_FRAGMENT_KTX)
     implementation(Libs.NAVIGATION_UI_KTX)
     implementation(Libs.ROOM_KTX)
     implementation(Libs.ROOM_RUNTIME)
     kapt(Libs.ROOM_COMPILER)
     testImplementation(Libs.ROOM_KTX)
     testImplementation(Libs.ROOM_RUNTIME)
 
     // Dagger
     implementation(Libs.DAGGER_ANDROID)
     implementation(Libs.DAGGER_ANDROID_SUPPORT)
     kapt(Libs.DAGGER_COMPILER)
     kapt(Libs.DAGGER_ANDROID_PROCESSOR)
     kaptAndroidTest(Libs.DAGGER_COMPILER)
     kaptAndroidTest(Libs.DAGGER_ANDROID_PROCESSOR)
 
     // Glide
     implementation(Libs.GLIDE)
     kapt(Libs.GLIDE_COMPILER)
 
     // Fabric and Firebase
     implementation(Libs.FIREBASE_UI_AUTH)
     implementation(Libs.CRASHLYTICS)
 
     // Date and time API for Java.
     implementation(Libs.THREETENABP)
     testImplementation(Libs.THREETENBP)
 
     // Kotlin
     implementation(Libs.KOTLIN_STDLIB)
 
     // Instrumentation tests
     androidTestImplementation(Libs.ESPRESSO_CORE)
     androidTestImplementation(Libs.ESPRESSO_CONTRIB)
     androidTestImplementation(Libs.EXT_JUNIT)
     androidTestImplementation(Libs.RUNNER)
     androidTestImplementation(Libs.RULES)
 
     // Local unit tests
     testImplementation(Libs.JUNIT)
     testImplementation(Libs.MOCKITO_CORE)
     testImplementation(Libs.MOCKITO_KOTLIN)
     testImplementation(Libs.HAMCREST)
 
     // Solve conflicts with gson. DataBinding is using an old version.
     implementation(Libs.GSON)
 
     implementation(Libs.ARCORE)
 }
 
 apply(plugin = "com.google.gms.google-services")

commit 8f88c4e9a1786a0b608409730761902b7a14ccb6
tree 13172859cc7252462f34f7270a04afde0c3ca187
parent 1d0c6c9221487f2dda76062d176f03747c8736a1
author Alexey Karataev <35783149+akarataev@users.noreply.github.com> 1561016268 +0300
committer Jose Alcerreca <jalc@google.com> 1561016268 +0200

    Enables incremental annotation processing
    
    Change-Id: Ie3ab76d4af95db891d596f87e80f5514bc36156e

diff --git a/depconstraints/build.gradle.kts b/depconstraints/build.gradle.kts
index 111bb046c..16b6ad2a6 100644
--- a/depconstraints/build.gradle.kts
+++ b/depconstraints/build.gradle.kts
@@ -1,139 +1,139 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 plugins {
     id("java-platform")
     id("maven-publish")
 }
 
 val appcompat = "1.1.0-beta01"
 val activity = "1.0.0-beta01"
 val cardview = "1.0.0"
 val archTesting = "2.0.0"
 val arcore = "1.7.0"
 val browser = "1.0.0"
 val constraintLayout = "1.1.3"
 val core = "1.2.0"
 val coroutines = "1.3.4"
 val coroutinesTest = "1.3.4"
 val crashlytics = "2.9.8"
 val dagger = "2.26"
 val drawerLayout = "1.1.0-beta01"
 val espresso = "3.1.1"
 val firebaseAnalytics = "17.4.0"
 val firebaseAuth = "19.3.1"
 val firebaseConfig = "19.1.4"
 val firebaseFirestore = "21.4.3"
 val firebaseFunctions = "19.0.2"
 val firebaseMessaging = "20.1.6"
 val firebaseUi = "4.0.0"
 val flexbox = "1.1.0"
 val fragment = "1.1.0-beta01"
-val glide = "4.6.1"
+val glide = "4.9.0"
 val googleMapUtils = "0.5"
 val googlePlayServicesMaps = "16.0.0"
 val googlePlayServicesVision = "17.0.2"
 val gson = "2.8.6"
 val hamcrest = "1.3"
 val junit = "4.12"
 val junitExt = "1.1.1"
 val lifecycle = "2.2.0"
 val lottie = "3.0.0"
 val material = "1.1.0"
 val mockito = "3.3.1"
 val mockitoKotlin = "1.5.0"
 val okhttp = "3.10.0"
 val okio = "1.14.0"
 val pageIndicator = "1.3.0"
 val playCore = "1.6.5"
-val room = "2.1.0"
+val room = "2.2.5"
 val rules = "1.1.1"
 val runner = "1.2.0"
 val threetenabp = "1.0.5"
 val timber = "4.7.1"
 val viewpager2 = "1.0.0"
 
 dependencies {
     constraints {
         api("${Libs.ACTIVITY_KTX}:$activity")
         api("${Libs.APPCOMPAT}:$appcompat")
         api("${Libs.CARDVIEW}:$cardview")
         api("${Libs.ARCH_TESTING}:$archTesting")
         api("${Libs.ARCORE}:$arcore")
         api("${Libs.BROWSER}:$browser")
         api("${Libs.CONSTRAINT_LAYOUT}:$constraintLayout")
         api("${Libs.CORE_KTX}:$core")
         api("${Libs.COROUTINES}:$coroutines")
         api("${Libs.COROUTINES_TEST}:$coroutines")
         api("${Libs.CRASHLYTICS}:$crashlytics")
         api("${Libs.DAGGER_ANDROID}:$dagger")
         api("${Libs.DAGGER_ANDROID_SUPPORT}:$dagger")
         api("${Libs.DAGGER_COMPILER}:$dagger")
         api("${Libs.DAGGER_ANDROID_PROCESSOR}:$dagger")
         api("${Libs.DRAWER_LAYOUT}:$drawerLayout")
         api("${Libs.ESPRESSO_CORE}:$espresso")
         api("${Libs.ESPRESSO_CONTRIB}:$espresso")
         api("${Libs.FIREBASE_AUTH}:$firebaseAuth")
         api("${Libs.FIREBASE_CONFIG}:$firebaseConfig")
         api("${Libs.FIREBASE_ANALYTICS}:$firebaseAnalytics")
         api("${Libs.FIREBASE_FIRESTORE}:$firebaseFirestore")
         api("${Libs.FIREBASE_FUNCTIONS}:$firebaseFunctions")
         api("${Libs.FIREBASE_MESSAGING}:$firebaseMessaging")
         api("${Libs.FIREBASE_UI_AUTH}:$firebaseUi")
         api("${Libs.FLEXBOX}:$flexbox")
         api("${Libs.FRAGMENT_KTX}:$fragment")
         api("${Libs.GLIDE}:$glide")
         api("${Libs.GLIDE_COMPILER}:$glide")
         api("${Libs.GOOGLE_MAP_UTILS}:$googleMapUtils")
         api("${Libs.GOOGLE_PLAY_SERVICES_MAPS}:$googlePlayServicesMaps")
         api("${Libs.GOOGLE_PLAY_SERVICES_VISION}:$googlePlayServicesVision")
         api("${Libs.GSON}:$gson")
         api("${Libs.HAMCREST}:$hamcrest")
         api("${Libs.JUNIT}:$junit")
         api("${Libs.EXT_JUNIT}:$junitExt")
         api("${Libs.KOTLIN_STDLIB}:${Versions.KOTLIN}")
         api("${Libs.LIFECYCLE_COMPILER}:$lifecycle")
         api("${Libs.LIFECYCLE_LIVE_DATA_KTX}:$lifecycle")
         api("${Libs.LIFECYCLE_VIEW_MODEL_KTX}:$lifecycle")
         api("${Libs.LOTTIE}:$lottie")
         api("${Libs.MATERIAL}:$material")
         api("${Libs.MOCKITO_CORE}:$mockito")
         api("${Libs.MOCKITO_KOTLIN}:$mockitoKotlin")
         api("${Libs.NAVIGATION_FRAGMENT_KTX}:${Versions.NAVIGATION}")
         api("${Libs.NAVIGATION_UI_KTX}:${Versions.NAVIGATION}")
         api("${Libs.ROOM_KTX}:$room")
         api("${Libs.ROOM_RUNTIME}:$room")
         api("${Libs.ROOM_COMPILER}:$room")
         api("${Libs.OKHTTP}:$okhttp")
         api("${Libs.OKHTTP_LOGGING_INTERCEPTOR}:$okhttp")
         api("${Libs.OKIO}:$okio")
         api("${Libs.INK_PAGE_INDICATOR}:$pageIndicator")
         api("${Libs.RULES}:$rules")
         api("${Libs.RUNNER}:$runner")
         api("${Libs.THREETENABP}:$threetenabp")
         api("${Libs.THREETENBP}:${Versions.THREETENBP}")
         api("${Libs.TIMBER}:$timber")
         api("${Libs.VIEWPAGER2}:$viewpager2")
     }
 }
 
 publishing {
     publications {
         create<MavenPublication>("myPlatform") {
             from(components["javaPlatform"])
         }
     }
 }
diff --git a/mobile/build.gradle.kts b/mobile/build.gradle.kts
index 35d68a386..19ce5b053 100644
--- a/mobile/build.gradle.kts
+++ b/mobile/build.gradle.kts
@@ -1,217 +1,223 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 plugins {
     id("com.android.application")
     kotlin("android")
     kotlin("android.extensions")
     kotlin("kapt")
     id("androidx.navigation.safeargs.kotlin")
     id("io.fabric")
 }
 
 android {
     compileSdkVersion(Versions.COMPILE_SDK)
     defaultConfig {
         applicationId = "com.google.samples.apps.iosched"
         minSdkVersion(Versions.MIN_SDK)
         targetSdkVersion(Versions.TARGET_SDK)
         versionCode = Versions.versionCodeMobile
         versionName = Versions.versionName
         testInstrumentationRunner = "com.google.samples.apps.iosched.tests.CustomTestRunner"
 
         buildConfigField("com.google.android.gms.maps.model.LatLng",
                 "MAP_VIEWPORT_BOUND_NE",
                 "new com.google.android.gms.maps.model.LatLng(${properties["map_viewport_bound_ne"]})")
         buildConfigField("com.google.android.gms.maps.model.LatLng",
                 "MAP_VIEWPORT_BOUND_SW",
                 "new com.google.android.gms.maps.model.LatLng(${properties["map_viewport_bound_sw"]})")
 
         buildConfigField("float", "MAP_CAMERA_FOCUS_ZOOM", properties["map_camera_focus_zoom"] as String)
 
         resValue("dimen", "map_camera_bearing", properties["map_default_camera_bearing"] as String)
         resValue("dimen", "map_camera_target_lat", properties["map_default_camera_target_lat"] as String)
         resValue("dimen", "map_camera_target_lng", properties["map_default_camera_target_lng"] as String)
         resValue("dimen", "map_camera_tilt", properties["map_default_camera_tilt"] as String)
         resValue("dimen", "map_camera_zoom", properties["map_default_camera_zoom"] as String)
         resValue("dimen", "map_viewport_min_zoom", properties["map_viewport_min_zoom"] as String)
         resValue("dimen", "map_viewport_max_zoom", properties["map_viewport_max_zoom"] as String)
 
         manifestPlaceholders = mapOf("crashlyticsEnabled" to true)
 
         vectorDrawables.useSupportLibrary = true
+
+        javaCompileOptions {
+            annotationProcessorOptions {
+                arguments["room.incremental"] = "true"
+            }
+        }
     }
     buildTypes {
         getByName("release") {
             isMinifyEnabled = true
             // TODO: b/120517460 shrinkResource can't be used with dynamic-feature at this moment.
             //       Need to ensure the app size has not increased
             manifestPlaceholders = mapOf("crashlyticsEnabled" to true)
             proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
             resValue("string",
                     "google_maps_key",
                     "AIzaSyD5jqwKMm1SeoYsW25vxCXfTlhDBeZ4H5c")
 
             buildConfigField("String", "MAP_TILE_URL_BASE", "\"https://storage.googleapis.com/io2019-festivus-prod/images/maptiles\"")
         }
         getByName("debug") {
             versionNameSuffix = "-debug"
             manifestPlaceholders = mapOf("crashlyticsEnabled" to false)
             resValue("string",
                     "google_maps_key",
                     "AIzaSyAhJx57ikQH9rYc8IT8W3d2As5cGHMBvuo")
 
             buildConfigField("String", "MAP_TILE_URL_BASE", "\"https://storage.googleapis.com/io2019-festivus/images/maptiles\"")
         }
         maybeCreate("staging")
         getByName("staging") {
             initWith(getByName("debug"))
             versionNameSuffix = "-staging"
 
             // Specifies a sorted list of fallback build types that the
             // plugin should try to use when a dependency does not include a
             // "staging" build type.
             // Used with :test-shared, which doesn't have a staging variant.
             matchingFallbacks = listOf("debug")
         }
     }
     dataBinding {
         isEnabled = true
     }
 
     signingConfigs {
         // We need to sign debug builds with a debug key to make firebase auth happy
         getByName("debug") {
             storeFile = file("../debug.keystore")
             keyAlias = "androiddebugkey"
             keyPassword = "android"
             storePassword = "android"
         }
     }
 
     // debug and release variants share the same source dir
     sourceSets {
         getByName("debug") {
             java.srcDir("src/debugRelease/java")
         }
         getByName("release") {
             java.srcDir("src/debugRelease/java")
         }
     }
 
     lintOptions {
         // Eliminates UnusedResources false positives for resources used in DataBinding layouts
         isCheckGeneratedSources = true
         // Running lint over the debug variant is enough
         isCheckReleaseBuilds = false
         // See lint.xml for rules configuration
     }
 
     testBuildType = "staging"
 
     // Required for AR because it includes a library built with Java 8
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_1_8
         targetCompatibility = JavaVersion.VERSION_1_8
     }
     // To avoid the compile error: "Cannot inline bytecode built with JVM target 1.8
     // into bytecode that is being built with JVM target 1.6"
     kotlinOptions {
         val options = this as org.jetbrains.kotlin.gradle.dsl.KotlinJvmOptions
         options.jvmTarget = "1.8"
     }
 }
 
 dependencies {
     api(platform(project(":depconstraints")))
     kapt(platform(project(":depconstraints")))
 
     implementation(project(":shared"))
     implementation(project(":ar"))
     testImplementation(project(":test-shared"))
     testImplementation(project(":androidTest-shared"))
     implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))
 
     implementation(Libs.CORE_KTX)
 
     // UI
     implementation(Libs.ACTIVITY_KTX)
     implementation(Libs.APPCOMPAT)
     implementation(Libs.FRAGMENT_KTX)
     implementation(Libs.CARDVIEW)
     implementation(Libs.BROWSER)
     implementation(Libs.CONSTRAINT_LAYOUT)
     implementation(Libs.DRAWER_LAYOUT)
     implementation(Libs.MATERIAL)
     implementation(Libs.FLEXBOX)
     implementation(Libs.LOTTIE)
     implementation(Libs.INK_PAGE_INDICATOR)
 
     // Architecture Components
     implementation(Libs.LIFECYCLE_LIVE_DATA_KTX)
     kapt(Libs.LIFECYCLE_COMPILER)
     testImplementation(Libs.ARCH_TESTING)
     implementation(Libs.NAVIGATION_FRAGMENT_KTX)
     implementation(Libs.NAVIGATION_UI_KTX)
     implementation(Libs.ROOM_KTX)
     implementation(Libs.ROOM_RUNTIME)
     kapt(Libs.ROOM_COMPILER)
     testImplementation(Libs.ROOM_KTX)
     testImplementation(Libs.ROOM_RUNTIME)
 
     // Dagger
     implementation(Libs.DAGGER_ANDROID)
     implementation(Libs.DAGGER_ANDROID_SUPPORT)
     kapt(Libs.DAGGER_COMPILER)
     kapt(Libs.DAGGER_ANDROID_PROCESSOR)
     kaptAndroidTest(Libs.DAGGER_COMPILER)
     kaptAndroidTest(Libs.DAGGER_ANDROID_PROCESSOR)
 
     // Glide
     implementation(Libs.GLIDE)
     kapt(Libs.GLIDE_COMPILER)
 
     // Fabric and Firebase
     implementation(Libs.FIREBASE_UI_AUTH)
     implementation(Libs.CRASHLYTICS)
 
     // Date and time API for Java.
     implementation(Libs.THREETENABP)
     testImplementation(Libs.THREETENBP)
 
     // Kotlin
     implementation(Libs.KOTLIN_STDLIB)
 
     // Instrumentation tests
     androidTestImplementation(Libs.ESPRESSO_CORE)
     androidTestImplementation(Libs.ESPRESSO_CONTRIB)
     androidTestImplementation(Libs.EXT_JUNIT)
     androidTestImplementation(Libs.RUNNER)
     androidTestImplementation(Libs.RULES)
 
     // Local unit tests
     testImplementation(Libs.JUNIT)
     testImplementation(Libs.MOCKITO_CORE)
     testImplementation(Libs.MOCKITO_KOTLIN)
     testImplementation(Libs.HAMCREST)
 
     // Solve conflicts with gson. DataBinding is using an old version.
     implementation(Libs.GSON)
 
     implementation(Libs.ARCORE)
 }
 
 apply(plugin = "com.google.gms.google-services")
diff --git a/shared/build.gradle.kts b/shared/build.gradle.kts
index 3a8a62cdf..a236932e4 100644
--- a/shared/build.gradle.kts
+++ b/shared/build.gradle.kts
@@ -1,175 +1,181 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 plugins {
     id("com.android.library")
     kotlin("android")
     kotlin("android.extensions")
     kotlin("kapt")
 }
 
 android {
     compileSdkVersion(Versions.COMPILE_SDK)
     defaultConfig {
         minSdkVersion(Versions.MIN_SDK)
         targetSdkVersion(Versions.TARGET_SDK)
         versionCode = 1
         versionName = "1.0"
         testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
 
         buildConfigField("String", "CONFERENCE_TIMEZONE", properties["conference_timezone"] as String)
         buildConfigField("String", "CONFERENCE_DAY1_START", properties["conference_day1_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY1_END", properties["conference_day1_end"] as String)
         buildConfigField("String", "CONFERENCE_DAY2_START", properties["conference_day2_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY2_END", properties["conference_day2_end"] as String)
         buildConfigField("String", "CONFERENCE_DAY3_START", properties["conference_day3_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY3_END", properties["conference_day3_end"] as String)
 
         buildConfigField("String", "CONFERENCE_DAY1_AFTERHOURS_START", properties["conference_day1_afterhours_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY2_CONCERT_START", properties["conference_day2_concert_start"] as String)
 
         buildConfigField("String",
                 "BOOTSTRAP_CONF_DATA_FILENAME", properties["bootstrap_conference_data_filename"] as String)
 
         buildConfigField("String",
                 "CONFERENCE_WIFI_OFFERING_START", properties["conference_wifi_offering_start"] as String)
 
         consumerProguardFiles("consumer-proguard-rules.pro")
+
+        javaCompileOptions {
+            annotationProcessorOptions {
+                arguments["room.incremental"] = "true"
+            }
+        }
     }
 
     buildTypes {
         getByName("release") {
             buildConfigField("String", "REGISTRATION_ENDPOINT_URL", "\"https://events-d07ac.appspot.com/_ah/api/registration/v1/register\"")
             buildConfigField("String", "CONFERENCE_DATA_URL", "\"https://firebasestorage.googleapis.com/v0/b/io2019-festivus-prod/o/sessions.json?alt=media&token=89140adf-e228-45a5-9ae3-8ed01547166a\"")
         }
         getByName("debug") {
             buildConfigField("String", "REGISTRATION_ENDPOINT_URL", "\"https://events-dev-62d2e.appspot.com/_ah/api/registration/v1/register\"")
             buildConfigField("String", "CONFERENCE_DATA_URL", "\"https://firebasestorage.googleapis.com/v0/b/io2019-festivus/o/sessions.json?alt=media&token=019af2ec-9fd1-408e-9b86-891e4f66e674\"")
         }
         maybeCreate("staging")
         getByName("staging") {
             initWith(getByName("debug"))
 
             // Specifies a sorted list of fallback build types that the
             // plugin should try to use when a dependency does not include a
             // "staging" build type.
             // Used with :test-shared, which doesn't have a staging variant.
             matchingFallbacks = listOf("debug")
         }
     }
 
     lintOptions {
         disable("InvalidPackage", "MissingTranslation")
         // Version changes are beyond our control, so don't warn. The IDE will still mark these.
         disable("GradleDependency")
         // Timber needs to update to new Lint API
         disable("ObsoleteLintCustomCheck")
     }
 
     // debug and release variants share the same source dir
     sourceSets {
         getByName("debug") {
             java.srcDir("src/debugRelease/java")
         }
         getByName("release") {
             java.srcDir("src/debugRelease/java")
         }
     }
 
     // Some libs (such as androidx.core:core-ktx 1.2.0 and newer) require Java 8
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_1_8
         targetCompatibility = JavaVersion.VERSION_1_8
     }
 
     // To avoid the compile error: "Cannot inline bytecode built with JVM target 1.8
     // into bytecode that is being built with JVM target 1.6"
     kotlinOptions {
         val options = this as org.jetbrains.kotlin.gradle.dsl.KotlinJvmOptions
         options.jvmTarget = "1.8"
     }
 }
 
 dependencies {
     api(platform(project(":depconstraints")))
     kapt(platform(project(":depconstraints")))
     api(project(":model"))
     implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))
     testImplementation(project(":test-shared"))
     testImplementation(project(":androidTest-shared"))
 
     // Architecture Components
     implementation(Libs.LIFECYCLE_LIVE_DATA_KTX)
     implementation(Libs.LIFECYCLE_VIEW_MODEL_KTX)
     implementation(Libs.ROOM_KTX)
     implementation(Libs.ROOM_RUNTIME)
     kapt(Libs.ROOM_COMPILER)
     testImplementation(Libs.ARCH_TESTING)
 
     // Maps
     api(Libs.GOOGLE_MAP_UTILS) {
         exclude(group = "com.google.android.gms")
     }
     api(Libs.GOOGLE_PLAY_SERVICES_MAPS)
 
     // Utils
     api(Libs.TIMBER)
     implementation(Libs.GSON)
     implementation(Libs.CORE_KTX)
 
     // OkHttp
     implementation(Libs.OKHTTP)
     implementation(Libs.OKHTTP_LOGGING_INTERCEPTOR)
 
     // Kotlin
     implementation(Libs.KOTLIN_STDLIB)
 
     // Coroutines
     api(Libs.COROUTINES)
     testImplementation(Libs.COROUTINES_TEST)
 
     // Dagger
     implementation(Libs.DAGGER_ANDROID)
     implementation(Libs.DAGGER_ANDROID_SUPPORT)
     kapt(Libs.DAGGER_COMPILER)
     kapt(Libs.DAGGER_ANDROID_PROCESSOR)
 
     // Firebase
     api(Libs.FIREBASE_AUTH)
     api(Libs.FIREBASE_CONFIG)
     api(Libs.FIREBASE_ANALYTICS)
     api(Libs.FIREBASE_FIRESTORE)
     api(Libs.FIREBASE_FUNCTIONS)
     api(Libs.FIREBASE_MESSAGING)
 
     // Has to be replaced to avoid compile / runtime conflicts between okhttp and firestore
     api(Libs.OKIO)
 
     // ThreeTenBP for the shared module only. Date and time API for Java.
     testImplementation(Libs.THREETENBP)
     compileOnly("org.threeten:threetenbp:${Versions.THREETENBP}:no-tzdb")
 
     // Unit tests
     testImplementation(Libs.JUNIT)
     testImplementation(Libs.HAMCREST)
     testImplementation(Libs.MOCKITO_CORE)
     testImplementation(Libs.MOCKITO_KOTLIN)
 
     // unit tests livedata
     testImplementation(Libs.ARCH_TESTING)
 }
 
 apply(plugin = "com.google.gms.google-services")

commit acf627d8ca2aed7a4c164e4012225280ef9c3228
tree 13172859cc7252462f34f7270a04afde0c3ca187
parent 1d0c6c9221487f2dda76062d176f03747c8736a1
author Alexey Karataev <35783149+akarataev@users.noreply.github.com> 1561016268 +0300
committer Tiem Song <tiem@google.com> 1561016268 +0200

    Use KTX version of Firebase libraries
    
    Update Analytics, Auth, Config, Firestore, and Functions to use their
    respective KTX version.
    
    Also replace deprecated FirebaseAnalytics.Event.SELECT_CONTENT with SELECT_ITEM
    
    Bug: 153272675
    Test: kokoro + verifying the app runs
    Change-Id: Ie808535ab11a11c78ed43d29f5906dff751105ec

diff --git a/buildSrc/src/main/java/Libs.kt b/buildSrc/src/main/java/Libs.kt
index b02f1f57b..cebef8420 100644
--- a/buildSrc/src/main/java/Libs.kt
+++ b/buildSrc/src/main/java/Libs.kt
@@ -1,77 +1,77 @@
 /*
  * Copyright 2020 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 object Libs {
     const val ACTIVITY_KTX = "androidx.activity:activity-ktx"
     const val APPCOMPAT = "androidx.appcompat:appcompat"
     const val ARCH_TESTING = "androidx.arch.core:core-testing"
     const val ARCORE = "com.google.ar:core"
     const val BROWSER = "androidx.browser:browser"
     const val CARDVIEW = "androidx.cardview:cardview"
     const val CONSTRAINT_LAYOUT = "androidx.constraintlayout:constraintlayout"
     const val CORE_KTX = "androidx.core:core-ktx"
     const val CRASHLYTICS = "com.crashlytics.sdk.android:crashlytics"
     const val COROUTINES = "org.jetbrains.kotlinx:kotlinx-coroutines-core"
     const val COROUTINES_TEST = "org.jetbrains.kotlinx:kotlinx-coroutines-test"
     const val DAGGER_ANDROID = "com.google.dagger:dagger-android"
     const val DAGGER_ANDROID_PROCESSOR = "com.google.dagger:dagger-android-processor"
     const val DAGGER_ANDROID_SUPPORT = "com.google.dagger:dagger-android-support"
     const val DAGGER_COMPILER = "com.google.dagger:dagger-compiler"
     const val DRAWER_LAYOUT = "androidx.drawerlayout:drawerlayout"
     const val ESPRESSO_CONTRIB = "androidx.test.espresso:espresso-contrib"
     const val ESPRESSO_CORE = "androidx.test.espresso:espresso-core"
     const val EXT_JUNIT = "androidx.test.ext:junit"
-    const val FIREBASE_AUTH = "com.google.firebase:firebase-auth"
-    const val FIREBASE_CONFIG = "com.google.firebase:firebase-config"
-    const val FIREBASE_CORE = "com.google.firebase:firebase-core"
-    const val FIREBASE_FIRESTORE = "com.google.firebase:firebase-firestore"
-    const val FIREBASE_FUNCTIONS = "com.google.firebase:firebase-functions"
+    const val FIREBASE_ANALYTICS = "com.google.firebase:firebase-analytics-ktx"
+    const val FIREBASE_AUTH = "com.google.firebase:firebase-auth-ktx"
+    const val FIREBASE_CONFIG = "com.google.firebase:firebase-config-ktx"
+    const val FIREBASE_FIRESTORE = "com.google.firebase:firebase-firestore-ktx"
+    const val FIREBASE_FUNCTIONS = "com.google.firebase:firebase-functions-ktx"
     const val FIREBASE_MESSAGING = "com.google.firebase:firebase-messaging"
     const val FIREBASE_UI_AUTH = "com.firebaseui:firebase-ui-auth"
     const val FLEXBOX = "com.google.android:flexbox"
     const val FRAGMENT_KTX = "androidx.fragment:fragment-ktx"
     const val GLIDE = "com.github.bumptech.glide:glide"
     const val GLIDE_COMPILER = "com.github.bumptech.glide:compiler"
     const val GOOGLE_MAP_UTILS = "com.google.maps.android:android-maps-utils"
     const val GOOGLE_PLAY_SERVICES_MAPS = "com.google.android.gms:play-services-maps"
     const val GOOGLE_PLAY_SERVICES_VISION = "com.google.android.gms:play-services-vision"
     const val GSON = "com.google.code.gson:gson"
     const val HAMCREST = "org.hamcrest:hamcrest-library"
     const val INK_PAGE_INDICATOR = "com.pacioianu.david:ink-page-indicator"
     const val JUNIT = "junit:junit"
     const val KOTLIN_STDLIB = "org.jetbrains.kotlin:kotlin-stdlib-jdk7"
     const val LIFECYCLE_COMPILER = "androidx.lifecycle:lifecycle-compiler"
     const val LIFECYCLE_LIVE_DATA_KTX = "androidx.lifecycle:lifecycle-livedata-ktx"
     const val LIFECYCLE_VIEW_MODEL_KTX = "androidx.lifecycle:lifecycle-viewmodel-ktx"
     const val LOTTIE = "com.airbnb.android:lottie"
     const val MATERIAL = "com.google.android.material:material"
     const val MOCKITO_CORE = "org.mockito:mockito-core"
     const val MOCKITO_KOTLIN = "com.nhaarman:mockito-kotlin"
     const val NAVIGATION_FRAGMENT_KTX = "androidx.navigation:navigation-fragment-ktx"
     const val NAVIGATION_UI_KTX = "androidx.navigation:navigation-ui-ktx"
     const val OKHTTP = "com.squareup.okhttp3:okhttp"
     const val OKHTTP_LOGGING_INTERCEPTOR = "com.squareup.okhttp3:logging-interceptor"
     const val OKIO = "com.squareup.okio:okio"
     const val ROOM_COMPILER = "androidx.room:room-compiler"
     const val ROOM_KTX = "androidx.room:room-ktx"
     const val ROOM_RUNTIME = "androidx.room:room-runtime"
     const val RULES = "androidx.test:rules"
     const val RUNNER = "androidx.test:runner"
     const val THREETENABP = "com.jakewharton.threetenabp:threetenabp"
     const val THREETENBP = "org.threeten:threetenbp"
     const val TIMBER = "com.jakewharton.timber:timber"
     const val VIEWPAGER2 = "androidx.viewpager2:viewpager2"
 }
diff --git a/depconstraints/build.gradle.kts b/depconstraints/build.gradle.kts
index 06fde387b..111bb046c 100644
--- a/depconstraints/build.gradle.kts
+++ b/depconstraints/build.gradle.kts
@@ -1,140 +1,139 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 plugins {
     id("java-platform")
     id("maven-publish")
 }
 
 val appcompat = "1.1.0-beta01"
 val activity = "1.0.0-beta01"
 val cardview = "1.0.0"
 val archTesting = "2.0.0"
 val arcore = "1.7.0"
 val browser = "1.0.0"
 val constraintLayout = "1.1.3"
 val core = "1.2.0"
 val coroutines = "1.3.4"
 val coroutinesTest = "1.3.4"
 val crashlytics = "2.9.8"
 val dagger = "2.26"
 val drawerLayout = "1.1.0-beta01"
 val espresso = "3.1.1"
-val firebaseAnalytics = "17.2.2"
-val firebaseAuth = "19.2.0"
-val firebaseConfig = "19.1.1"
-val firebaseCore = "17.2.2"
-val firebaseFirestore = "21.4.0"
+val firebaseAnalytics = "17.4.0"
+val firebaseAuth = "19.3.1"
+val firebaseConfig = "19.1.4"
+val firebaseFirestore = "21.4.3"
 val firebaseFunctions = "19.0.2"
-val firebaseMessaging = "20.1.0"
+val firebaseMessaging = "20.1.6"
 val firebaseUi = "4.0.0"
 val flexbox = "1.1.0"
 val fragment = "1.1.0-beta01"
 val glide = "4.6.1"
 val googleMapUtils = "0.5"
 val googlePlayServicesMaps = "16.0.0"
 val googlePlayServicesVision = "17.0.2"
 val gson = "2.8.6"
 val hamcrest = "1.3"
 val junit = "4.12"
 val junitExt = "1.1.1"
 val lifecycle = "2.2.0"
 val lottie = "3.0.0"
 val material = "1.1.0"
 val mockito = "3.3.1"
 val mockitoKotlin = "1.5.0"
 val okhttp = "3.10.0"
 val okio = "1.14.0"
 val pageIndicator = "1.3.0"
 val playCore = "1.6.5"
 val room = "2.1.0"
 val rules = "1.1.1"
 val runner = "1.2.0"
 val threetenabp = "1.0.5"
 val timber = "4.7.1"
 val viewpager2 = "1.0.0"
 
 dependencies {
     constraints {
         api("${Libs.ACTIVITY_KTX}:$activity")
         api("${Libs.APPCOMPAT}:$appcompat")
         api("${Libs.CARDVIEW}:$cardview")
         api("${Libs.ARCH_TESTING}:$archTesting")
         api("${Libs.ARCORE}:$arcore")
         api("${Libs.BROWSER}:$browser")
         api("${Libs.CONSTRAINT_LAYOUT}:$constraintLayout")
         api("${Libs.CORE_KTX}:$core")
         api("${Libs.COROUTINES}:$coroutines")
         api("${Libs.COROUTINES_TEST}:$coroutines")
         api("${Libs.CRASHLYTICS}:$crashlytics")
         api("${Libs.DAGGER_ANDROID}:$dagger")
         api("${Libs.DAGGER_ANDROID_SUPPORT}:$dagger")
         api("${Libs.DAGGER_COMPILER}:$dagger")
         api("${Libs.DAGGER_ANDROID_PROCESSOR}:$dagger")
         api("${Libs.DRAWER_LAYOUT}:$drawerLayout")
         api("${Libs.ESPRESSO_CORE}:$espresso")
         api("${Libs.ESPRESSO_CONTRIB}:$espresso")
         api("${Libs.FIREBASE_AUTH}:$firebaseAuth")
         api("${Libs.FIREBASE_CONFIG}:$firebaseConfig")
-        api("${Libs.FIREBASE_CORE}:$firebaseCore")
+        api("${Libs.FIREBASE_ANALYTICS}:$firebaseAnalytics")
         api("${Libs.FIREBASE_FIRESTORE}:$firebaseFirestore")
         api("${Libs.FIREBASE_FUNCTIONS}:$firebaseFunctions")
         api("${Libs.FIREBASE_MESSAGING}:$firebaseMessaging")
         api("${Libs.FIREBASE_UI_AUTH}:$firebaseUi")
         api("${Libs.FLEXBOX}:$flexbox")
         api("${Libs.FRAGMENT_KTX}:$fragment")
         api("${Libs.GLIDE}:$glide")
         api("${Libs.GLIDE_COMPILER}:$glide")
         api("${Libs.GOOGLE_MAP_UTILS}:$googleMapUtils")
         api("${Libs.GOOGLE_PLAY_SERVICES_MAPS}:$googlePlayServicesMaps")
         api("${Libs.GOOGLE_PLAY_SERVICES_VISION}:$googlePlayServicesVision")
         api("${Libs.GSON}:$gson")
         api("${Libs.HAMCREST}:$hamcrest")
         api("${Libs.JUNIT}:$junit")
         api("${Libs.EXT_JUNIT}:$junitExt")
         api("${Libs.KOTLIN_STDLIB}:${Versions.KOTLIN}")
         api("${Libs.LIFECYCLE_COMPILER}:$lifecycle")
         api("${Libs.LIFECYCLE_LIVE_DATA_KTX}:$lifecycle")
         api("${Libs.LIFECYCLE_VIEW_MODEL_KTX}:$lifecycle")
         api("${Libs.LOTTIE}:$lottie")
         api("${Libs.MATERIAL}:$material")
         api("${Libs.MOCKITO_CORE}:$mockito")
         api("${Libs.MOCKITO_KOTLIN}:$mockitoKotlin")
         api("${Libs.NAVIGATION_FRAGMENT_KTX}:${Versions.NAVIGATION}")
         api("${Libs.NAVIGATION_UI_KTX}:${Versions.NAVIGATION}")
         api("${Libs.ROOM_KTX}:$room")
         api("${Libs.ROOM_RUNTIME}:$room")
         api("${Libs.ROOM_COMPILER}:$room")
         api("${Libs.OKHTTP}:$okhttp")
         api("${Libs.OKHTTP_LOGGING_INTERCEPTOR}:$okhttp")
         api("${Libs.OKIO}:$okio")
         api("${Libs.INK_PAGE_INDICATOR}:$pageIndicator")
         api("${Libs.RULES}:$rules")
         api("${Libs.RUNNER}:$runner")
         api("${Libs.THREETENABP}:$threetenabp")
         api("${Libs.THREETENBP}:${Versions.THREETENBP}")
         api("${Libs.TIMBER}:$timber")
         api("${Libs.VIEWPAGER2}:$viewpager2")
     }
 }
 
 publishing {
     publications {
         create<MavenPublication>("myPlatform") {
             from(components["javaPlatform"])
         }
     }
 }
diff --git a/mobile/src/debugRelease/java/com/google/samples/apps/iosched/di/SignInModule.kt b/mobile/src/debugRelease/java/com/google/samples/apps/iosched/di/SignInModule.kt
index 083ee2d8a..94004bcdf 100644
--- a/mobile/src/debugRelease/java/com/google/samples/apps/iosched/di/SignInModule.kt
+++ b/mobile/src/debugRelease/java/com/google/samples/apps/iosched/di/SignInModule.kt
@@ -1,77 +1,79 @@
 /*
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.google.samples.apps.iosched.di
 
 import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.auth.ktx.auth
 import com.google.firebase.firestore.FirebaseFirestore
+import com.google.firebase.ktx.Firebase
 import com.google.samples.apps.iosched.shared.data.signin.datasources.AuthIdDataSource
 import com.google.samples.apps.iosched.shared.data.signin.datasources.AuthStateUserDataSource
 import com.google.samples.apps.iosched.shared.data.signin.datasources.FirebaseAuthStateUserDataSource
 import com.google.samples.apps.iosched.shared.data.signin.datasources.FirestoreRegisteredUserDataSource
 import com.google.samples.apps.iosched.shared.data.signin.datasources.RegisteredUserDataSource
 import com.google.samples.apps.iosched.shared.domain.sessions.NotificationAlarmUpdater
 import com.google.samples.apps.iosched.shared.fcm.FcmTokenUpdater
 import com.google.samples.apps.iosched.util.signin.FirebaseAuthSignInHandler
 import com.google.samples.apps.iosched.util.signin.SignInHandler
 import dagger.Module
 import dagger.Provides
 import javax.inject.Singleton
 
 @Module
 internal class SignInModule {
     @Provides
     fun provideSignInHandler(): SignInHandler = FirebaseAuthSignInHandler()
 
     @Singleton
     @Provides
     fun provideRegisteredUserDataSource(
         firestore: FirebaseFirestore
     ): RegisteredUserDataSource {
         return FirestoreRegisteredUserDataSource(firestore)
     }
 
     @Singleton
     @Provides
     fun provideAuthStateUserDataSource(
         firebase: FirebaseAuth,
         firestore: FirebaseFirestore,
         notificationAlarmUpdater: NotificationAlarmUpdater
     ): AuthStateUserDataSource {
 
         return FirebaseAuthStateUserDataSource(
             firebase,
             FcmTokenUpdater(firestore),
             notificationAlarmUpdater
         )
     }
 
     @Singleton
     @Provides
     fun provideFirebaseAuth(): FirebaseAuth {
-        return FirebaseAuth.getInstance()
+        return Firebase.auth
     }
 
     @Singleton
     @Provides
     fun providesAuthIdDataSource(
         firebaseAuth: FirebaseAuth
     ): AuthIdDataSource {
         return object : AuthIdDataSource {
             override fun getUserId() = firebaseAuth.currentUser?.uid
         }
     }
 }
diff --git a/mobile/src/main/java/com/google/samples/apps/iosched/util/FirebaseAnalyticsHelper.kt b/mobile/src/main/java/com/google/samples/apps/iosched/util/FirebaseAnalyticsHelper.kt
index f968b70c4..e809520ae 100644
--- a/mobile/src/main/java/com/google/samples/apps/iosched/util/FirebaseAnalyticsHelper.kt
+++ b/mobile/src/main/java/com/google/samples/apps/iosched/util/FirebaseAnalyticsHelper.kt
@@ -1,157 +1,157 @@
 /*
  * Copyright 2019 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.google.samples.apps.iosched.util
 
 import android.app.Activity
 import android.content.Context
 import android.content.SharedPreferences
-import android.os.Bundle
 import android.preference.PreferenceManager
 import com.google.firebase.analytics.FirebaseAnalytics
+import com.google.firebase.analytics.ktx.analytics
+import com.google.firebase.analytics.ktx.logEvent
+import com.google.firebase.ktx.Firebase
 import com.google.samples.apps.iosched.shared.analytics.AnalyticsActions
 import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper
 import com.google.samples.apps.iosched.shared.data.prefs.PreferenceStorage
 import com.google.samples.apps.iosched.shared.data.prefs.SharedPreferenceStorage
 import com.google.samples.apps.iosched.shared.domain.internal.DefaultScheduler
 import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate
 import timber.log.Timber
 
 /**
  * Firebase Analytics implementation of AnalyticsHelper
  */
 class FirebaseAnalyticsHelper(
     context: Context,
     signInViewModelDelegate: SignInViewModelDelegate,
     preferenceStorage: PreferenceStorage
 ) : AnalyticsHelper {
 
-    private var firebaseAnalytics: FirebaseAnalytics = FirebaseAnalytics.getInstance(context)
+    private var firebaseAnalytics = Firebase.analytics
 
     /**
      * stores a strong reference to preference change][PreferenceManager]
      */
     private var prefListener: SharedPreferences.OnSharedPreferenceChangeListener? = null
 
     private var analyticsEnabled: Boolean = false
         set(enabled) {
             field = enabled
             Timber.d("Setting Analytics enabled: $enabled")
             firebaseAnalytics.setAnalyticsCollectionEnabled(enabled)
         }
 
     /**
      * Initialize Analytics tracker.  If the user has permitted tracking and has already signed TOS,
      * (possible except on first run), initialize analytics Immediately.
      */
     init {
 
         DefaultScheduler.execute { // Prevent access to preferences on main thread
             analyticsEnabled = preferenceStorage.sendUsageStatistics
         }
 
         Timber.d("Analytics initialized")
 
         // The listener will initialize Analytics when the TOS is signed, or enable/disable
         // Analytics based on the "anonymous data collection" setting.
         setupPreferenceChangeListener(context)
 
         signInViewModelDelegate.observeSignedInUser().observeForever { signedIn ->
             setUserSignedIn(signedIn == true)
             Timber.d("Updated user signed in to $signedIn")
         }
 
         signInViewModelDelegate.observeRegisteredUser().observeForever { registered ->
             setUserRegistered(registered == true)
             Timber.d("Updated user registered to $registered")
         }
     }
 
     override fun sendScreenView(screenName: String, activity: Activity) {
-        val params = Bundle().apply {
-            putString(FirebaseAnalytics.Param.ITEM_ID, screenName)
-            putString(FirebaseAnalytics.Param.CONTENT_TYPE, FA_CONTENT_TYPE_SCREENVIEW)
-        }
         firebaseAnalytics.run {
             setCurrentScreen(activity, screenName, null)
-            logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, params)
+            logEvent(FirebaseAnalytics.Event.SELECT_ITEM) {
+                param(FirebaseAnalytics.Param.ITEM_ID, screenName)
+                param(FirebaseAnalytics.Param.CONTENT_TYPE, FA_CONTENT_TYPE_SCREENVIEW)
+            }
             Timber.d("Screen View recorded: $screenName")
         }
     }
 
     override fun logUiEvent(itemId: String, action: String) {
-        val params = Bundle().apply {
-            putString(FirebaseAnalytics.Param.ITEM_ID, itemId)
-            putString(FirebaseAnalytics.Param.CONTENT_TYPE, FA_CONTENT_TYPE_UI_EVENT)
-            putString(FA_KEY_UI_ACTION, action)
+        firebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_ITEM) {
+            param(FirebaseAnalytics.Param.ITEM_ID, itemId)
+            param(FirebaseAnalytics.Param.CONTENT_TYPE, FA_CONTENT_TYPE_UI_EVENT)
+            param(FA_KEY_UI_ACTION, action)
         }
-        firebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, params)
         Timber.d("Event recorded for $itemId, $action")
     }
 
     override fun setUserSignedIn(isSignedIn: Boolean) {
         // todo(alexlucas) : Set up user properties in both dev and prod
         firebaseAnalytics.setUserProperty(UPROP_USER_SIGNED_IN, isSignedIn.toString())
     }
 
     override fun setUserRegistered(isRegistered: Boolean) {
         // todo(alexlucas) : Set up user properties in both dev and prod
         firebaseAnalytics.setUserProperty(UPROP_USER_REGISTERED, isRegistered.toString())
     }
 
     /**
      * Set up a listener for preference changes.
      */
     private fun setupPreferenceChangeListener(context: Context) {
         val listener = SharedPreferences.OnSharedPreferenceChangeListener { pref, key ->
             val action = try {
                 getBooleanPreferenceAction(pref, key)
             } catch (e: ClassCastException) {
                 return@OnSharedPreferenceChangeListener
             }
 
             if (key == SharedPreferenceStorage.PREF_SEND_USAGE_STATISTICS) {
                 val sendStats = pref.getBoolean(key, false)
                 analyticsEnabled = sendStats
             } else {
                 logUiEvent("Preference: $key", action)
             }
         }
 
         DefaultScheduler.execute { // Prevent access to preferences on main thread
             SharedPreferenceStorage(context).registerOnPreferenceChangeListener(listener)
         }
         prefListener = listener
         Timber.d("Preference Change Listener has been set up.")
     }
 
     private fun getBooleanPreferenceAction(prefs: SharedPreferences, key: String): String {
         return if (prefs.getBoolean(key, true)) AnalyticsActions.ENABLE
         else AnalyticsActions.DISABLE
     }
 
     companion object {
         private const val UPROP_USER_SIGNED_IN = "user_signed_in"
         private const val UPROP_USER_REGISTERED = "user_registered"
 
         /**
          * Log a specific screen view under the `screenName` string.
          */
         private const val FA_CONTENT_TYPE_SCREENVIEW = "screen"
         private const val FA_KEY_UI_ACTION = "ui_action"
         private const val FA_CONTENT_TYPE_UI_EVENT = "ui event"
     }
 }
diff --git a/shared/build.gradle.kts b/shared/build.gradle.kts
index 805fead51..3a8a62cdf 100644
--- a/shared/build.gradle.kts
+++ b/shared/build.gradle.kts
@@ -1,174 +1,175 @@
 /*
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 plugins {
     id("com.android.library")
     kotlin("android")
     kotlin("android.extensions")
     kotlin("kapt")
 }
 
 android {
     compileSdkVersion(Versions.COMPILE_SDK)
     defaultConfig {
         minSdkVersion(Versions.MIN_SDK)
         targetSdkVersion(Versions.TARGET_SDK)
         versionCode = 1
         versionName = "1.0"
         testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
 
         buildConfigField("String", "CONFERENCE_TIMEZONE", properties["conference_timezone"] as String)
         buildConfigField("String", "CONFERENCE_DAY1_START", properties["conference_day1_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY1_END", properties["conference_day1_end"] as String)
         buildConfigField("String", "CONFERENCE_DAY2_START", properties["conference_day2_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY2_END", properties["conference_day2_end"] as String)
         buildConfigField("String", "CONFERENCE_DAY3_START", properties["conference_day3_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY3_END", properties["conference_day3_end"] as String)
 
         buildConfigField("String", "CONFERENCE_DAY1_AFTERHOURS_START", properties["conference_day1_afterhours_start"] as String)
         buildConfigField("String", "CONFERENCE_DAY2_CONCERT_START", properties["conference_day2_concert_start"] as String)
 
         buildConfigField("String",
                 "BOOTSTRAP_CONF_DATA_FILENAME", properties["bootstrap_conference_data_filename"] as String)
 
         buildConfigField("String",
                 "CONFERENCE_WIFI_OFFERING_START", properties["conference_wifi_offering_start"] as String)
 
         consumerProguardFiles("consumer-proguard-rules.pro")
     }
 
     buildTypes {
         getByName("release") {
             buildConfigField("String", "REGISTRATION_ENDPOINT_URL", "\"https://events-d07ac.appspot.com/_ah/api/registration/v1/register\"")
             buildConfigField("String", "CONFERENCE_DATA_URL", "\"https://firebasestorage.googleapis.com/v0/b/io2019-festivus-prod/o/sessions.json?alt=media&token=89140adf-e228-45a5-9ae3-8ed01547166a\"")
         }
         getByName("debug") {
             buildConfigField("String", "REGISTRATION_ENDPOINT_URL", "\"https://events-dev-62d2e.appspot.com/_ah/api/registration/v1/register\"")
             buildConfigField("String", "CONFERENCE_DATA_URL", "\"https://firebasestorage.googleapis.com/v0/b/io2019-festivus/o/sessions.json?alt=media&token=019af2ec-9fd1-408e-9b86-891e4f66e674\"")
         }
         maybeCreate("staging")
         getByName("staging") {
             initWith(getByName("debug"))
 
             // Specifies a sorted list of fallback build types that the
             // plugin should try to use when a dependency does not include a
             // "staging" build type.
             // Used with :test-shared, which doesn't have a staging variant.
             matchingFallbacks = listOf("debug")
         }
     }
 
     lintOptions {
         disable("InvalidPackage", "MissingTranslation")
         // Version changes are beyond our control, so don't warn. The IDE will still mark these.
         disable("GradleDependency")
         // Timber needs to update to new Lint API
         disable("ObsoleteLintCustomCheck")
     }
 
     // debug and release variants share the same source dir
     sourceSets {
         getByName("debug") {
             java.srcDir("src/debugRelease/java")
         }
         getByName("release") {
             java.srcDir("src/debugRelease/java")
         }
     }
 
     // Some libs (such as androidx.core:core-ktx 1.2.0 and newer) require Java 8
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_1_8
         targetCompatibility = JavaVersion.VERSION_1_8
     }
 
     // To avoid the compile error: "Cannot inline bytecode built with JVM target 1.8
     // into bytecode that is being built with JVM target 1.6"
     kotlinOptions {
         val options = this as org.jetbrains.kotlin.gradle.dsl.KotlinJvmOptions
         options.jvmTarget = "1.8"
     }
 }
 
 dependencies {
     api(platform(project(":depconstraints")))
     kapt(platform(project(":depconstraints")))
     api(project(":model"))
     implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))
     testImplementation(project(":test-shared"))
     testImplementation(project(":androidTest-shared"))
 
     // Architecture Components
     implementation(Libs.LIFECYCLE_LIVE_DATA_KTX)
     implementation(Libs.LIFECYCLE_VIEW_MODEL_KTX)
     implementation(Libs.ROOM_KTX)
     implementation(Libs.ROOM_RUNTIME)
     kapt(Libs.ROOM_COMPILER)
     testImplementation(Libs.ARCH_TESTING)
 
     // Maps
     api(Libs.GOOGLE_MAP_UTILS) {
         exclude(group = "com.google.android.gms")
     }
     api(Libs.GOOGLE_PLAY_SERVICES_MAPS)
 
     // Utils
     api(Libs.TIMBER)
     implementation(Libs.GSON)
     implementation(Libs.CORE_KTX)
 
     // OkHttp
     implementation(Libs.OKHTTP)
     implementation(Libs.OKHTTP_LOGGING_INTERCEPTOR)
 
     // Kotlin
     implementation(Libs.KOTLIN_STDLIB)
 
     // Coroutines
     api(Libs.COROUTINES)
     testImplementation(Libs.COROUTINES_TEST)
 
     // Dagger
     implementation(Libs.DAGGER_ANDROID)
     implementation(Libs.DAGGER_ANDROID_SUPPORT)
     kapt(Libs.DAGGER_COMPILER)
     kapt(Libs.DAGGER_ANDROID_PROCESSOR)
 
     // Firebase
     api(Libs.FIREBASE_AUTH)
     api(Libs.FIREBASE_CONFIG)
-    api(Libs.FIREBASE_CORE)
+    api(Libs.FIREBASE_ANALYTICS)
     api(Libs.FIREBASE_FIRESTORE)
     api(Libs.FIREBASE_FUNCTIONS)
     api(Libs.FIREBASE_MESSAGING)
+
     // Has to be replaced to avoid compile / runtime conflicts between okhttp and firestore
     api(Libs.OKIO)
 
     // ThreeTenBP for the shared module only. Date and time API for Java.
     testImplementation(Libs.THREETENBP)
     compileOnly("org.threeten:threetenbp:${Versions.THREETENBP}:no-tzdb")
 
     // Unit tests
     testImplementation(Libs.JUNIT)
     testImplementation(Libs.HAMCREST)
     testImplementation(Libs.MOCKITO_CORE)
     testImplementation(Libs.MOCKITO_KOTLIN)
 
     // unit tests livedata
     testImplementation(Libs.ARCH_TESTING)
 }
 
 apply(plugin = "com.google.gms.google-services")
diff --git a/shared/src/debugRelease/java/com/google/samples/apps/iosched/shared/di/SharedModule.kt b/shared/src/debugRelease/java/com/google/samples/apps/iosched/shared/di/SharedModule.kt
index a7bd94196..c19d34a1a 100644
--- a/shared/src/debugRelease/java/com/google/samples/apps/iosched/shared/di/SharedModule.kt
+++ b/shared/src/debugRelease/java/com/google/samples/apps/iosched/shared/di/SharedModule.kt
@@ -1,232 +1,235 @@
 /*
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.google.samples.apps.iosched.shared.di
 
 import android.content.Context
 import com.google.firebase.firestore.FirebaseFirestore
-import com.google.firebase.firestore.FirebaseFirestoreSettings
+import com.google.firebase.firestore.ktx.firestore
+import com.google.firebase.firestore.ktx.firestoreSettings
 import com.google.firebase.functions.FirebaseFunctions
+import com.google.firebase.functions.ktx.functions
+import com.google.firebase.ktx.Firebase
 import com.google.firebase.remoteconfig.FirebaseRemoteConfig
 import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings
+import com.google.firebase.remoteconfig.ktx.remoteConfig
+import com.google.firebase.remoteconfig.ktx.remoteConfigSettings
 import com.google.samples.apps.iosched.shared.BuildConfig
 import com.google.samples.apps.iosched.shared.R
 import com.google.samples.apps.iosched.shared.data.BootstrapConferenceDataSource
 import com.google.samples.apps.iosched.shared.data.ConferenceDataRepository
 import com.google.samples.apps.iosched.shared.data.ConferenceDataSource
 import com.google.samples.apps.iosched.shared.data.NetworkConferenceDataSource
 import com.google.samples.apps.iosched.shared.data.ar.ArDebugFlagEndpoint
 import com.google.samples.apps.iosched.shared.data.ar.DefaultArDebugFlagEndpoint
 import com.google.samples.apps.iosched.shared.data.config.AppConfigDataSource
 import com.google.samples.apps.iosched.shared.data.config.RemoteAppConfigDataSource
 import com.google.samples.apps.iosched.shared.data.db.AppDatabase
 import com.google.samples.apps.iosched.shared.data.feed.AnnouncementDataSource
 import com.google.samples.apps.iosched.shared.data.feed.DefaultFeedRepository
 import com.google.samples.apps.iosched.shared.data.feed.FeedRepository
 import com.google.samples.apps.iosched.shared.data.feed.FirestoreAnnouncementDataSource
 import com.google.samples.apps.iosched.shared.data.feed.FirestoreMomentDataSource
 import com.google.samples.apps.iosched.shared.data.feed.MomentDataSource
 import com.google.samples.apps.iosched.shared.data.feedback.DefaultFeedbackEndpoint
 import com.google.samples.apps.iosched.shared.data.feedback.FeedbackEndpoint
 import com.google.samples.apps.iosched.shared.data.session.DefaultSessionRepository
 import com.google.samples.apps.iosched.shared.data.session.SessionRepository
 import com.google.samples.apps.iosched.shared.data.userevent.DefaultSessionAndUserEventRepository
 import com.google.samples.apps.iosched.shared.data.userevent.FirestoreUserEventDataSource
 import com.google.samples.apps.iosched.shared.data.userevent.SessionAndUserEventRepository
 import com.google.samples.apps.iosched.shared.data.userevent.UserEventDataSource
 import com.google.samples.apps.iosched.shared.domain.search.FtsMatchStrategy
 import com.google.samples.apps.iosched.shared.domain.search.SessionTextMatchStrategy
 import com.google.samples.apps.iosched.shared.domain.search.SimpleMatchStrategy
 import com.google.samples.apps.iosched.shared.fcm.FcmTopicSubscriber
 import com.google.samples.apps.iosched.shared.fcm.TopicSubscriber
 import com.google.samples.apps.iosched.shared.time.DefaultTimeProvider
 import com.google.samples.apps.iosched.shared.time.TimeProvider
 import com.google.samples.apps.iosched.shared.util.NetworkUtils
 import dagger.Module
 import dagger.Provides
 import kotlinx.coroutines.CoroutineDispatcher
 import kotlinx.coroutines.ExperimentalCoroutinesApi
 import javax.inject.Named
 import javax.inject.Singleton
 
 /**
  * Module where classes created in the shared module are created.
  */
 @ExperimentalCoroutinesApi
 @Module
 class SharedModule {
 
 // Define the data source implementations that should be used. All data sources are singletons.
 
     @Singleton
     @Provides
     @Named("remoteConfDatasource")
     fun provideConferenceDataSource(
         context: Context,
         networkUtils: NetworkUtils
     ): ConferenceDataSource {
         return NetworkConferenceDataSource(context, networkUtils)
     }
 
     @Singleton
     @Provides
     @Named("bootstrapConfDataSource")
     fun provideBootstrapRemoteSessionDataSource(): ConferenceDataSource {
         return BootstrapConferenceDataSource
     }
 
     @Singleton
     @Provides
     fun provideConferenceDataRepository(
         @Named("remoteConfDatasource") remoteDataSource: ConferenceDataSource,
         @Named("bootstrapConfDataSource") boostrapDataSource: ConferenceDataSource,
         appDatabase: AppDatabase
     ): ConferenceDataRepository {
         return ConferenceDataRepository(remoteDataSource, boostrapDataSource, appDatabase)
     }
 
     @Singleton
     @Provides
     fun provideAnnouncementDataSource(firestore: FirebaseFirestore): AnnouncementDataSource {
         return FirestoreAnnouncementDataSource(firestore)
     }
 
     @Singleton
     @Provides
     fun provideMomentsDataSource(firestore: FirebaseFirestore): MomentDataSource {
         return FirestoreMomentDataSource(firestore)
     }
 
     @Singleton
     @Provides
     fun provideFeedRepository(
         dataSource: AnnouncementDataSource,
         momentsDataSource: MomentDataSource
     ): FeedRepository {
         return DefaultFeedRepository(dataSource, momentsDataSource)
     }
 
     @Singleton
     @Provides
     fun provideSessionRepository(
         conferenceDataRepository: ConferenceDataRepository
     ): SessionRepository {
         return DefaultSessionRepository(conferenceDataRepository)
     }
 
     @Singleton
     @Provides
     fun provideUserEventDataSource(
         firestore: FirebaseFirestore,
         @IoDispatcher ioDispatcher: CoroutineDispatcher
     ): UserEventDataSource {
         return FirestoreUserEventDataSource(firestore, ioDispatcher)
     }
 
     @Singleton
     @Provides
     fun provideFeedbackEndpoint(functions: FirebaseFunctions): FeedbackEndpoint {
         return DefaultFeedbackEndpoint(functions)
     }
 
     @Singleton
     @Provides
     fun provideSessionAndUserEventRepository(
         userEventDataSource: UserEventDataSource,
         sessionRepository: SessionRepository
     ): SessionAndUserEventRepository {
         return DefaultSessionAndUserEventRepository(
             userEventDataSource,
             sessionRepository
         )
     }
 
     @Singleton
     @Provides
     fun provideFirebaseFireStore(): FirebaseFirestore {
-        val firestore = FirebaseFirestore.getInstance()
-        firestore.firestoreSettings = FirebaseFirestoreSettings.Builder()
+        return Firebase.firestore.apply {
             // This is to enable the offline data
             // https://firebase.google.com/docs/firestore/manage-data/enable-offline
-            .setPersistenceEnabled(true)
-            .build()
-        return firestore
+            firestoreSettings = firestoreSettings { isPersistenceEnabled = true }
+        }
     }
 
     @Singleton
     @Provides
     fun provideFirebaseFunctions(): FirebaseFunctions {
-        return FirebaseFunctions.getInstance()
+        return Firebase.functions
     }
 
     @Singleton
     @Provides
     fun provideArDebugFlagEndpoint(functions: FirebaseFunctions): ArDebugFlagEndpoint {
         return DefaultArDebugFlagEndpoint(functions)
     }
 
     @Singleton
     @Provides
     fun provideTopicSubscriber(): TopicSubscriber {
         return FcmTopicSubscriber()
     }
 
     @Singleton
     @Provides
     fun provideFirebaseRemoteConfigSettings(): FirebaseRemoteConfigSettings {
-        val builder = FirebaseRemoteConfigSettings.Builder()
-        if (BuildConfig.DEBUG) {
-            builder.minimumFetchIntervalInSeconds = 0
+        return if (BuildConfig.DEBUG) {
+            remoteConfigSettings { minimumFetchIntervalInSeconds = 0 }
+        } else {
+            remoteConfigSettings { }
         }
-        return builder.build()
     }
 
     @Singleton
     @Provides
     fun provideFirebaseRemoteConfig(
         configSettings: FirebaseRemoteConfigSettings
     ): FirebaseRemoteConfig {
-        return FirebaseRemoteConfig.getInstance().apply {
+        return Firebase.remoteConfig.apply {
             setConfigSettingsAsync(configSettings)
             setDefaultsAsync(R.xml.remote_config_defaults)
         }
     }
 
     @Singleton
     @Provides
     fun provideAppConfigDataSource(
         remoteConfig: FirebaseRemoteConfig,
         configSettings: FirebaseRemoteConfigSettings,
         @IoDispatcher ioDispatcher: CoroutineDispatcher
     ): AppConfigDataSource {
         return RemoteAppConfigDataSource(remoteConfig, configSettings, ioDispatcher)
     }
 
     @Singleton
     @Provides
     fun provideTimeProvider(): TimeProvider {
         return DefaultTimeProvider
     }
 
     @Singleton
     @Provides
     fun provideSessionTextMatchStrategy(
         @SearchUsingRoomEnabledFlag useRoom: Boolean,
         appDatabase: AppDatabase
     ): SessionTextMatchStrategy {
         return if (useRoom) FtsMatchStrategy(appDatabase) else SimpleMatchStrategy
     }
 }

commit 879cd2d3c87edd97b84dae46cda14c15e80b08f9
tree 13172859cc7252462f34f7270a04afde0c3ca187
parent 1d0c6c9221487f2dda76062d176f03747c8736a1
author Alexey Karataev <35783149+akarataev@users.noreply.github.com> 1561016268 +0300
committer Manuel Vivo <mvivo@google.com> 1561016268 +0200

    Firebase tasks await happens off the main thread
    
    Fixes: b/151067913
    
    Change-Id: I65316e3b306b296ba279bd4cdae1d477adeb1387

diff --git a/shared/src/main/java/com/google/samples/apps/iosched/shared/data/signin/datasources/FirebaseAuthStateUserDataSource.kt b/shared/src/main/java/com/google/samples/apps/iosched/shared/data/signin/datasources/FirebaseAuthStateUserDataSource.kt
index 63907c9b4..33d68064a 100644
--- a/shared/src/main/java/com/google/samples/apps/iosched/shared/data/signin/datasources/FirebaseAuthStateUserDataSource.kt
+++ b/shared/src/main/java/com/google/samples/apps/iosched/shared/data/signin/datasources/FirebaseAuthStateUserDataSource.kt
@@ -1,115 +1,117 @@
 /*
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.google.samples.apps.iosched.shared.data.signin.datasources
 
-import com.google.android.gms.tasks.Tasks
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.auth.FirebaseUser
 import com.google.firebase.auth.GetTokenResult
 import com.google.samples.apps.iosched.shared.data.signin.AuthenticatedUserInfoBasic
 import com.google.samples.apps.iosched.shared.data.signin.AuthenticatedUserRegistration
 import com.google.samples.apps.iosched.shared.data.signin.FirebaseUserInfo
 import com.google.samples.apps.iosched.shared.domain.sessions.NotificationAlarmUpdater
 import com.google.samples.apps.iosched.shared.fcm.FcmTokenUpdater
 import com.google.samples.apps.iosched.shared.result.Result
 import com.google.samples.apps.iosched.shared.result.Result.Success
+import com.google.samples.apps.iosched.shared.util.suspendAndWait
 import javax.inject.Inject
-import kotlinx.coroutines.channels.ProducerScope
 import kotlinx.coroutines.channels.awaitClose
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.channelFlow
+import kotlinx.coroutines.flow.map
 import timber.log.Timber
 
 /**
  * An [AuthStateUserDataSource] that listens to changes in [FirebaseAuth].
  *
  * When a [FirebaseUser] is available, it
  *  * Posts it to the user observable
  *  * Fetches the ID token
  *  * Uses the ID token to trigger the registration point
  *  * Stores the FCM ID Token in Firestore
  *  * Posts the user ID to the observable
  *
  * This data source doesn't find if a user is registered or not (is an attendee). Once the
  * registration point is called, the server will generate a field in the user document, which
  * is observed by [RegisteredUserDataSource] in its implementation
  * [FirestoreRegisteredUserDataSource].
  */
 class FirebaseAuthStateUserDataSource @Inject constructor(
     val firebase: FirebaseAuth,
     private val tokenUpdater: FcmTokenUpdater,
     private val notificationAlarmUpdater: NotificationAlarmUpdater
 ) : AuthStateUserDataSource {
 
     // lastUid can be potentially consumed and written from different threads
     // Making it thread safe with @Volatile
     @Volatile
     private var lastUid: String? = null
 
     override fun getBasicUserInfo(): Flow<Result<AuthenticatedUserInfoBasic?>> {
-        return channelFlow {
-            val authStateListener: ((FirebaseAuth) -> Unit) = generateAuthStateListener()
+        return channelFlow<FirebaseAuth> {
+            val authStateListener: ((FirebaseAuth) -> Unit) = { auth ->
+                // This callback gets always executed on the main thread because of Firebase
+                channel.offer(auth)
+            }
             firebase.addAuthStateListener(authStateListener)
             awaitClose { firebase.removeAuthStateListener(authStateListener) }
+        }.map { authState ->
+            // This map gets executed in the Flow's context
+            processAuthState(authState)
         }
     }
 
-    private fun ProducerScope<Result<AuthenticatedUserInfoBasic?>>.generateAuthStateListener():
-        (FirebaseAuth) -> Unit {
+    private suspend fun processAuthState(auth: FirebaseAuth): Result<AuthenticatedUserInfoBasic?> {
         // Listener that saves the [FirebaseUser], fetches the ID token
         // and updates the user ID observable.
-        return { auth ->
-            Timber.d("Received a FirebaseAuth update.")
+        Timber.d("Received a FirebaseAuth update.")
 
-            auth.currentUser?.let { currentUser ->
-                // Get the ID token (force refresh)
-                val tokenTask = currentUser.getIdToken(true)
-                try {
-                    // Do this synchronously
-                    val await: GetTokenResult = Tasks.await(tokenTask)
-                    await.token?.let {
-                        // Call registration point to generate a result in Firestore
-                        Timber.d("User authenticated, hitting registration endpoint")
-                        AuthenticatedUserRegistration.callRegistrationEndpoint(it)
-                    }
-                } catch (e: Exception) {
-                    Timber.e(e)
-                    return@let
+        auth.currentUser?.let { currentUser ->
+            // Get the ID token (force refresh)
+            val tokenTask = currentUser.getIdToken(true)
+            try {
+                val tokenResult: GetTokenResult = tokenTask.suspendAndWait()
+                tokenResult.token?.let {
+                    // Call registration point to generate a result in Firestore
+                    Timber.d("User authenticated, hitting registration endpoint")
+                    AuthenticatedUserRegistration.callRegistrationEndpoint(it)
                 }
-                // Save the FCM ID token in firestore
-                tokenUpdater.updateTokenForUser(currentUser.uid)
+            } catch (e: Exception) {
+                Timber.e(e)
+                return@let
             }
+            // Save the FCM ID token in firestore
+            tokenUpdater.updateTokenForUser(currentUser.uid)
+        }
 
-            if (auth.currentUser == null) {
-                // Logout, cancel all alarms
-                notificationAlarmUpdater.cancelAll()
-            }
+        if (auth.currentUser == null) {
+            // Logout, cancel all alarms
+            notificationAlarmUpdater.cancelAll()
+        }
 
-            auth.currentUser?.let {
-                if (lastUid != auth.uid) { // Prevent duplicates
-                    notificationAlarmUpdater.updateAll(it.uid)
-                }
+        auth.currentUser?.let {
+            if (lastUid != auth.uid) { // Prevent duplicates
+                notificationAlarmUpdater.updateAll(it.uid)
             }
+        }
 
-            // Save the last UID to prevent setting too many alarms.
-            lastUid = auth.uid
+        // Save the last UID to prevent setting too many alarms.
+        lastUid = auth.uid
 
-            // Send the current user for observers
-            channel.offer(Success(FirebaseUserInfo(auth.currentUser)))
-        }
+        // Send the current user for observers
+        return Success(FirebaseUserInfo(auth.currentUser))
     }
 }
diff --git a/shared/src/main/java/com/google/samples/apps/iosched/shared/util/Extensions.kt b/shared/src/main/java/com/google/samples/apps/iosched/shared/util/Extensions.kt
index 98e26b007..602b6f1a4 100644
--- a/shared/src/main/java/com/google/samples/apps/iosched/shared/util/Extensions.kt
+++ b/shared/src/main/java/com/google/samples/apps/iosched/shared/util/Extensions.kt
@@ -1,176 +1,195 @@
 /*
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.google.samples.apps.iosched.shared.util
 
 import android.os.Parcel
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import androidx.annotation.LayoutRes
 import androidx.core.os.ParcelCompat
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.FragmentActivity
 import androidx.fragment.app.FragmentManager
 import androidx.fragment.app.FragmentTransaction
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.Transformations
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
+import com.google.android.gms.tasks.Task
 import com.google.samples.apps.iosched.shared.BuildConfig
 import kotlinx.coroutines.Job
+import kotlinx.coroutines.suspendCancellableCoroutine
 import org.threeten.bp.ZonedDateTime
 import timber.log.Timber
+import kotlin.coroutines.resume
+import kotlin.coroutines.resumeWithException
 
 /** Convenience for callbacks/listeners whose return value indicates an event was consumed. */
 inline fun consume(f: () -> Unit): Boolean {
     f()
     return true
 }
 
 /**
  * Allows calls like
  *
  * `viewGroup.inflate(R.layout.foo)`
  */
 fun ViewGroup.inflate(@LayoutRes layout: Int, attachToRoot: Boolean = false): View {
     return LayoutInflater.from(context).inflate(layout, this, attachToRoot)
 }
 
 /**
  * Allows calls like
  *
  * `supportFragmentManager.inTransaction { add(...) }`
  */
 inline fun FragmentManager.inTransaction(func: FragmentTransaction.() -> FragmentTransaction) {
     beginTransaction().func().commit()
 }
 
 // region ViewModels
 
 /**
  * For Actvities, allows declarations like
  * ```
  * val myViewModel = viewModelProvider(myViewModelFactory)
  * ```
  */
 inline fun <reified VM : ViewModel> FragmentActivity.viewModelProvider(
     provider: ViewModelProvider.Factory
 ) =
     ViewModelProvider(this, provider).get(VM::class.java)
 
 /**
  * For Fragments, allows declarations like
  * ```
  * val myViewModel = viewModelProvider(myViewModelFactory)
  * ```
  */
 inline fun <reified VM : ViewModel> Fragment.viewModelProvider(
     provider: ViewModelProvider.Factory
 ) =
     ViewModelProvider(this, provider).get(VM::class.java)
 
 /**
  * Like [Fragment.viewModelProvider] for Fragments that want a [ViewModel] scoped to the Activity.
  */
 inline fun <reified VM : ViewModel> Fragment.activityViewModelProvider(
     provider: ViewModelProvider.Factory
 ) =
     ViewModelProvider(requireActivity(), provider).get(VM::class.java)
 
 /**
  * Like [Fragment.viewModelProvider] for Fragments that want a [ViewModel] scoped to the parent
  * Fragment.
  */
 inline fun <reified VM : ViewModel> Fragment.parentViewModelProvider(
     provider: ViewModelProvider.Factory
 ) =
     ViewModelProvider(parentFragment!!, provider).get(VM::class.java)
 
 // endregion
 // region Parcelables, Bundles
 
 /** Write a boolean to a Parcel. */
 fun Parcel.writeBooleanUsingCompat(value: Boolean) = ParcelCompat.writeBoolean(this, value)
 
 /** Read a boolean from a Parcel. */
 fun Parcel.readBooleanUsingCompat() = ParcelCompat.readBoolean(this)
 
 // endregion
 // region LiveData
 
 /** Uses `Transformations.map` on a LiveData */
 fun <X, Y> LiveData<X>.map(body: (X) -> Y): LiveData<Y> {
     return Transformations.map(this, body)
 }
 
 fun <T> MutableLiveData<T>.setValueIfNew(newValue: T) {
     if (this.value != newValue) value = newValue
 }
 
 // endregion
 
 // region ZonedDateTime
 fun ZonedDateTime.toEpochMilli() = this.toInstant().toEpochMilli()
 // endregion
 
 /**
  * Helper to force a when statement to assert all options are matched in a when statement.
  *
  * By default, Kotlin doesn't care if all branches are handled in a when statement. However, if you
  * use the when statement as an expression (with a value) it will force all cases to be handled.
  *
  * This helper is to make a lightweight way to say you meant to match all of them.
  *
  * Usage:
  *
  * ```
  * when(sealedObject) {
  *     is OneType -> //
  *     is AnotherType -> //
  * }.checkAllMatched
  */
 val <T> T.checkAllMatched: T
     get() = this
 
 // region Coroutines
 
 /**
  * Cancel the Job if it's active.
  */
 fun Job?.cancelIfActive() {
     if (this?.isActive == true) {
         cancel()
     }
 }
 
 // endregion
 
 // region UI utils
 
 // endregion
 
+// region Firebase
+suspend fun <T> Task<T>.suspendAndWait(): T =
+    suspendCancellableCoroutine { continuation ->
+        addOnSuccessListener { result ->
+            continuation.resume(result)
+        }
+        addOnFailureListener { exception ->
+            continuation.resumeWithException(exception)
+        }
+        addOnCanceledListener {
+            continuation.resumeWithException(Exception("Firebase Task was cancelled"))
+        }
+    }
+// endregion
+
 /**
  * Helper to throw exceptions only in Debug builds, logging a warning otherwise.
  */
 fun exceptionInDebug(t: Throwable) {
     if (BuildConfig.DEBUG) {
         throw t
     } else {
         Timber.e(t)
     }
 }
