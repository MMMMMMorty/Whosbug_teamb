appname githawk
version githawk 1.0
commit d71240d6cc3a5742ff17eaac18749c26c31f487e
tree 13172859cc7252462f34f7270a04afde0c3ca187
parent 1d0c6c9221487f2dda76062d176f03747c8736a1
author Alexey Karataev <35783149+akarataev@users.noreply.github.com> 1561016268 +0300
committer Joan Disho <dishojoan@gmail.com> 1561016268 +0200

    Save inbox preference (#2669) (#2693)

diff --git a/Classes/Notifications/Filter/InboxFilterController.swift b/Classes/Notifications/Filter/InboxFilterController.swift
index a1271ce2..09442ed8 100644
--- a/Classes/Notifications/Filter/InboxFilterController.swift
+++ b/Classes/Notifications/Filter/InboxFilterController.swift
@@ -1,102 +1,111 @@
 //
 //  InboxFilterController.swift
 //  Freetime
 //
 //  Created by Ryan Nystrom on 12/2/18.
 //  Copyright © 2018 Ryan Nystrom. All rights reserved.
 //
 
 import Foundation
 import ContextMenu
 
 protocol InboxFilterControllerClient {
     func fetchSubscriptions(completion: @escaping (Result<[RepositoryDetails]>) -> Void)
 }
 
 protocol InboxFilterControllerListener: class {
     func didUpdateSelectedFilter(for controller: InboxFilterController)
 }
 
 final class InboxFilterController {
 
     let client: InboxFilterControllerClient
     let announcer = Announcer<InboxFilterControllerListener>()
-
+    private static let key = "com.freetime.InboxFilterController.filterIndex"
+    
+    private static var filterIndex: Int {
+        get { return UserDefaults.standard.integer(forKey: key) }
+        set(newIndex) { UserDefaults.standard.set(newIndex, forKey: key) }
+    }
+    
     private static let filters = [
         InboxFilterModel(type: .unread),
         InboxFilterModel(type: .all),
         InboxFilterModel(type: .mentioned),
         InboxFilterModel(type: .assigned),
         InboxFilterModel(type: .created)
     ]
 
-    private(set) var selected: InboxFilterModel = InboxFilterController.filters[0] {
+    private(set) var selected: InboxFilterModel = InboxFilterController.filters[filterIndex] {
         didSet {
             announcer.enumerate { $0.didUpdateSelectedFilter(for: self) }
+            guard let newIndex = InboxFilterController.filters
+                .firstIndex(where: { $0.type == selected.type }) else { return }
+            InboxFilterController.filterIndex = newIndex
         }
     }
     private var fetchedFilters = [InboxFilterModel]()
 
     init(client: InboxFilterControllerClient) {
         self.client = client
     }
 
     func update(selection: InboxFilterModel) {
         selected = selection
     }
 
     private func selected(model: InboxFilterModel) {
         selected = model
     }
 
     private func showRepos(from viewController: UIViewController?) {
         guard let viewController = viewController else { return }
         ContextMenu.shared.show(
             sourceViewController: viewController,
             viewController: InboxFilterReposViewController(inboxFilterController: self),
             options: ContextMenu.Options(
                 containerStyle: ContextMenu.ContainerStyle(
                     backgroundColor: Styles.Colors.menuBackgroundColor.color
                 )
             )
         )
     }
 
     func showMenu(from viewController: UIViewController) {
         var items: [ContrastContextMenuItem] = InboxFilterController.filters.map { model in
             ContrastContextMenuItem(
                 title: model.type.title,
                 iconName: model.type.iconName,
                 iconColor: Styles.Colors.Blue.menu.color,
                 separator: false,
                 action: { [weak self] menu in
                     menu.dismiss(animated: trueUnlessReduceMotionEnabled)
                     self?.selected(model: model)
             })
         }
         items.append(ContrastContextMenuItem(
             title: NSLocalizedString("Repos", comment: ""),
             iconName: "repo",
             iconColor: Styles.Colors.Blue.menu.color,
             separator: true,
             action: { [weak self, weak viewController] menu in
                 menu.dismiss(animated: trueUnlessReduceMotionEnabled)
                 self?.showRepos(from: viewController)
         }))
 
         ContextMenu.shared.show(
             sourceViewController: viewController,
             viewController: ContrastContextMenu(items: items),
             options: ContextMenu.Options(
                 containerStyle: ContextMenu.ContainerStyle(
                     backgroundColor: Styles.Colors.menuBackgroundColor.color
                 ),
                 menuStyle: .minimal,
                 hapticsStyle: .medium,
                 position: .centerX
             ),
             sourceView: viewController.navigationItem.titleView
         )
     }
 
 }

commit 1d0c6c9221487f2dda76062d176f03747c8736a1
tree fb3fb6b6dd0ef1df21f84b79ab05a70b7b9b79b6
parent 97a8fbb0bb316f07dc2667d79082b93f9b6f00d2
author Luciano Almeida <passos.luciano@outlook.com> 1560239505 -0300
committer Joan Disho <dishojoan@gmail.com> 1560239505 +0200

    Fix #2769 (#2770)
    
    * Changing request review message to self when the same user
    
    * Fixing PR comments
    
    * If the notification type is security vulnerability, show repo
    
    * Removing issue number from secure vulnerability issue
    
    * guard statement

diff --git a/Classes/Notifications/NotificationCell.swift b/Classes/Notifications/NotificationCell.swift
index 2b60c094..50447c90 100644
--- a/Classes/Notifications/NotificationCell.swift
+++ b/Classes/Notifications/NotificationCell.swift
@@ -1,290 +1,292 @@
 //
 //  NotificationCell.swift
 //  Freetime
 //
 //  Created by Ryan Nystrom on 6/8/18.
 //  Copyright © 2018 Ryan Nystrom. All rights reserved.
 //
 
 import UIKit
 import SnapKit
 import StyledTextKit
 
 protocol NotificationCellDelegate: class {
     func didTapRead(cell: NotificationCell)
     func didTapWatch(cell: NotificationCell)
     func didTapMore(cell: NotificationCell, sender: UIView)
 }
 
 final class NotificationCell: SelectableCell, CAAnimationDelegate {
 
     public static let inset = UIEdgeInsets(
         top: NotificationCell.topInset + NotificationCell.headerHeight + Styles.Sizes.rowSpacing,
         left: Styles.Sizes.icon.width + 2*Styles.Sizes.columnSpacing,
         bottom: NotificationCell.actionsHeight,
         right: Styles.Sizes.gutter
     )
     public static let topInset = Styles.Sizes.rowSpacing
     public static let headerHeight = ceil(Styles.Text.secondary.preferredFont.lineHeight)
     public static let actionsHeight = Styles.Sizes.buttonMin.height
 
     private weak var delegate: NotificationCellDelegate?
+    private let iconImageView = UIImageView()
     private let dateLabel = ShowMoreDetailsLabel()
     private let detailsLabel = UILabel()
     private let textView = StyledTextView()
     private let stackView = UIStackView()
     private let commentButton = HittableButton()
     private let readButton = HittableButton()
     private let watchButton = HittableButton()
     private let moreButton = HittableButton()
     private let readOverlayView = UIView()
 
     override init(frame: CGRect) {
         super.init(frame: frame)
 
         accessibilityTraits |= UIAccessibilityTraitButton
         isAccessibilityElement = true
 
         backgroundColor = .white
         clipsToBounds = true
 
         contentView.addSubview(iconImageView)
         contentView.addSubview(detailsLabel)
         contentView.addSubview(dateLabel)
         contentView.addSubview(textView)
         contentView.addSubview(stackView)
         stackView.addArrangedSubview(commentButton)
         stackView.addArrangedSubview(readButton)
         stackView.addArrangedSubview(watchButton)
         stackView.addArrangedSubview(moreButton)
 
         let grey = Styles.Colors.Gray.light.color
         let font = Styles.Text.secondary.preferredFont
         let inset = NotificationCell.inset
         let actionsHeight = NotificationCell.actionsHeight
 
         stackView.alignment = .center
         stackView.distribution = .equalSpacing
         stackView.snp.makeConstraints { make in
             make.left.equalTo(inset.left)
             make.right.equalTo(-inset.right)
             make.bottom.equalToSuperview()
             make.height.equalTo(actionsHeight)
         }
 
         iconImageView.snp.makeConstraints { make in
             make.top.equalTo(inset.top)
             make.centerX.equalTo(inset.left / 2)
         }
 
         dateLabel.font = font
         dateLabel.textColor = grey
         dateLabel.snp.makeConstraints { make in
             make.top.equalTo(NotificationCell.topInset)
             make.right.equalTo(-inset.right)
         }
 
         detailsLabel.lineBreakMode = .byTruncatingMiddle
         detailsLabel.setContentCompressionResistancePriority(.defaultLow, for: .horizontal)
         detailsLabel.snp.makeConstraints { make in
             make.top.equalTo(Styles.Sizes.rowSpacing)
             make.left.equalTo(NotificationCell.inset.left)
             make.right.lessThanOrEqualTo(dateLabel.snp.left).offset(-Styles.Sizes.columnSpacing)
         }
 
         commentButton.titleLabel?.font = font
         commentButton.isUserInteractionEnabled = false
         commentButton.tintColor = grey
         commentButton.setTitleColor(grey, for: .normal)
         commentButton.contentEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: -2, right: 0)
         commentButton.titleEdgeInsets = UIEdgeInsets(top: -4, left: 2, bottom: 0, right: 0)
         commentButton.setImage(UIImage(named: "comment-small").withRenderingMode(.alwaysTemplate), for: .normal)
         commentButton.contentHorizontalAlignment = .left
         commentButton.snp.makeConstraints { make in
             make.height.equalTo(actionsHeight)
             make.width.equalTo(commentButton.snp.height)
         }
 
         watchButton.tintColor = grey
         watchButton.addTarget(self, action: #selector(onWatch(sender:)), for: .touchUpInside)
         watchButton.contentHorizontalAlignment = .center
         watchButton.snp.makeConstraints { make in
             make.height.equalTo(actionsHeight)
             make.width.equalTo(watchButton.snp.height)
         }
 
         readButton.tintColor = grey
         readButton.setImage(UIImage(named: "check-small").withRenderingMode(.alwaysTemplate), for: .normal)
         readButton.addTarget(self, action: #selector(onRead(sender:)), for: .touchUpInside)
         readButton.contentHorizontalAlignment = .center
         readButton.snp.makeConstraints { make in
             make.height.equalTo(actionsHeight)
             make.width.equalTo(readButton.snp.height)
         }
 
         moreButton.tintColor = grey
         moreButton.setImage(UIImage(named: "bullets-small").withRenderingMode(.alwaysTemplate), for: .normal)
         moreButton.addTarget(self, action: #selector(onMore(sender:)), for: .touchUpInside)
         moreButton.contentHorizontalAlignment = .right
         moreButton.snp.makeConstraints { make in
             make.height.equalTo(actionsHeight)
             make.width.equalTo(moreButton.snp.height)
         }
 
         contentView.addBorder(.bottom, left: inset.left)
 
         readOverlayView.backgroundColor = Styles.Colors.Gray.light.color.withAlphaComponent(0.08)
         readOverlayView.isHidden = true
         addSubview(readOverlayView)
     }
 
     required init?(coder aDecoder: NSCoder) {
         fatalError("init(coder:) has not been implemented")
     }
 
     override func layoutSubviews() {
         super.layoutSubviews()
         textView.reposition(for: contentView.bounds.width)
         readOverlayView.frame = bounds
     }
 
     override var accessibilityLabel: String? {
         get { return AccessibilityHelper.generatedLabel(forCell: self) }
         set {}
     }
 
     override var canBecomeFirstResponder: Bool {
         return true
     }
 
     public func configure(with model: NotificationViewModel, delegate: NotificationCellDelegate?) {
         textView.configure(with: model.title, width: contentView.bounds.width)
         dateLabel.setText(date: model.date, format: .short)
         self.delegate = delegate
 
         var titleAttributes = [
             NSAttributedStringKey.font: Styles.Text.title.preferredFont,
             NSAttributedStringKey.foregroundColor: Styles.Colors.Gray.light.color
         ]
         let title = NSMutableAttributedString(string: "\(model.owner)/\(model.repo) ", attributes: titleAttributes)
         titleAttributes[.font] = Styles.Text.secondary.preferredFont
         switch model.number {
-        case .number(let number): title.append(NSAttributedString(string: "#\(number)", attributes: titleAttributes))
+        case .number(let number):
+            guard model.type != .securityVulnerability else { break }
+            title.append(NSAttributedString(string: "#\(number)", attributes: titleAttributes))
         default: break
         }
         detailsLabel.attributedText = title
 
         let tintColor: UIColor
         switch model.state {
         case .closed: tintColor = Styles.Colors.Red.medium.color
         case .merged: tintColor = Styles.Colors.purple.color
         case .open: tintColor = Styles.Colors.Green.medium.color
         case .pending: tintColor = Styles.Colors.Blue.medium.color
         }
         iconImageView.tintColor = tintColor
         iconImageView.image = model.type.icon(merged: model.state == .merged)?
             .withRenderingMode(.alwaysTemplate)
 
         let hasComments = model.comments > 0
         commentButton.alpha = hasComments ? 1 : 0.3
         commentButton.setTitle(hasComments ? model.comments.abbreviated : "", for: .normal)
 
         let watchingImageName = model.watching ? "mute" : "unmute"
         watchButton.setImage(UIImage(named: "\(watchingImageName)-small")?.withRenderingMode(.alwaysTemplate), for: .normal)
 
         dimViews(dim: model.read)
         readOverlayView.isHidden = !model.read
 
         let watchAccessibilityAction = UIAccessibilityCustomAction(
             name: model.watching ?
                 NSLocalizedString("Unwatch notification", comment: "") :
                 NSLocalizedString("Watch notification", comment: ""),
             target: self,
             selector: #selector(onWatch(sender:))
         )
         let readAccessibilityAction = UIAccessibilityCustomAction(
             name: Constants.Strings.markRead,
             target: self,
             selector: #selector(onRead(sender:))
         )
         let moreOptionsAccessibilityAction = UIAccessibilityCustomAction(
             name: Constants.Strings.moreOptions,
             target: self,
             selector: #selector(onMore(sender:))
         )
 
         var customActions = [watchAccessibilityAction, moreOptionsAccessibilityAction]
 
         if model.read == false {
             customActions.append(readAccessibilityAction)
         }
         accessibilityCustomActions = customActions
     }
 
     @objc func onRead(sender: UIView) {
         delegate?.didTapRead(cell: self)
     }
 
     @objc func onWatch(sender: UIView) {
         delegate?.didTapWatch(cell: self)
     }
 
     @objc func onMore(sender: UIView) {
         delegate?.didTapMore(cell: self, sender: sender)
     }
 
     func animateRead() {
         UIView.animate(withDuration: 0.1) {
             self.dimViews(dim: true)
         }
 
         readOverlayView.isHidden = false
 
         if readOverlayView.layer.mask == nil {
             let mask = CAShapeLayer()
             mask.fillColor = UIColor.black.cgColor
             let smallest = min(readButton.bounds.width, readButton.bounds.height)
             let position = convert(readButton.center, from: readButton.superview)
             let longestEdge = max(self.bounds.width - position.x, position.x)
             let ratio = ceil(longestEdge / (smallest / 2.0)) + 5
             let bounds = CGRect(x: 0, y: 0, width: smallest, height: smallest)
             mask.path = UIBezierPath(ovalIn: bounds).cgPath
             mask.bounds = bounds
             mask.position = position
             mask.transform = CATransform3DMakeScale(ratio, ratio, ratio)
             readOverlayView.layer.mask = mask
         }
 
         let scaleDuration: TimeInterval = 0.25
 
         let scale = CABasicAnimation(keyPath: "transform.scale")
         scale.fromValue = 1
         scale.duration = scaleDuration
         scale.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
 
         let fade = CABasicAnimation(keyPath: "opacity")
         fade.fromValue = 0
         fade.duration = 0.05
         fade.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
 
         let group = CAAnimationGroup()
         group.duration = scaleDuration
         group.animations = [scale, fade]
 
         readOverlayView.layer.mask?.add(group, forKey: nil)
 
         DispatchQueue.main.asyncAfter(deadline: .now() + scaleDuration) {
             self.readOverlayView.layer.mask?.removeFromSuperlayer()
         }
     }
 
     private func dimViews(dim: Bool) {
         let alpha: CGFloat = dim ? 0.7 : 1
         [iconImageView, detailsLabel, dateLabel, textView].forEach { view in
             view.alpha = alpha
         }
         readButton.alpha = dim ? 0.2 : 1
     }
 
 }
diff --git a/Classes/Notifications/NotificationSectionController.swift b/Classes/Notifications/NotificationSectionController.swift
index 2992a4e4..f4991413 100644
--- a/Classes/Notifications/NotificationSectionController.swift
+++ b/Classes/Notifications/NotificationSectionController.swift
@@ -1,114 +1,122 @@
 import IGListKit
 import GitHubAPI
 import Squawk
 
 final class NotificationSectionController: ListSwiftSectionController<NotificationViewModel>, NotificationCellDelegate {
 
     private let modelController: NotificationModelController
     private let generator = UIImpactFeedbackGenerator()
 
     init(modelController: NotificationModelController) {
         self.modelController = modelController
         super.init()
     }
 
     override func createBinders(from value: NotificationViewModel) -> [ListBinder] {
         return [
             binder(
                 value,
                 cellType: ListCellType.class(NotificationCell.self),
                 size: {
                     return $0.collection.cellSize(with:
                         $0.value.title.viewSize(in: $0.collection.safeContentWidth()).height
                     )
             },
                 configure: { [weak self] in
                     $0.configure(with: $1.value, delegate: self)
                 },
                 didSelect: { [weak self] context in
                     self?.showIssue(model: context.value)
             })
         ]
     }
 
     func didTapRead(cell: NotificationCell) {
         guard
             let id = value?.id,
             let model = modelController.githubClient.cache.get(id: id) as NotificationViewModel?,
             !model.read
         else {
             return
         }
         cell.animateRead()
         generator.impactOccurred()
         modelController.markNotificationRead(id: id)
     }
 
     func didTapWatch(cell: NotificationCell) {
         guard let value = self.value else { return }
         modelController.toggleWatch(notification: value)
     }
 
     func didTapMore(cell: NotificationCell, sender: UIView) {
         guard let value = self.value else { return }
             let alert = UIAlertController.configured(preferredStyle: .actionSheet)
             alert.addActions([
                 viewController?.action(owner: value.owner, icon: #imageLiteral(resourceName: "organization")),
                 viewController?.action(
                     owner: value.owner,
                     repo: value.repo,
                     icon: #imageLiteral(resourceName: "repo"),
                     client: modelController.githubClient
                 ),
                 AlertAction.cancel()
                 ])
             alert.popoverPresentationController?.setSourceView(sender)
             viewController?.present(alert, animated: trueUnlessReduceMotionEnabled)
     }
 
     private func showIssue(model: NotificationViewModel) {
         if NotificationModelController.readOnOpen {
             modelController.markNotificationRead(id: model.id)
         }
 
         BadgeNotifications.clear(for: model)
 
+        guard model.type != .securityVulnerability else {
+            viewController?.route_push(to: RepositoryViewController(
+                client: modelController.githubClient,
+                repo: RepositoryDetails(owner: model.owner, name: model.repo)
+            ))
+            return
+        }
+
         switch model.number {
         case .hash(let hash):
             viewController?.presentCommit(owner: model.owner, repo: model.repo, hash: hash)
         case .number(let number):
             viewController?.route_detail(to: IssuesViewController(
                 client: modelController.githubClient,
                 model: IssueDetailsModel(owner: model.owner, repo: model.repo, number: number),
                 scrollToBottom: true
             ))
         case .release(let release):
             showRelease(release, model: model)
         }
     }
 
     private func showRelease(_ release: String, model: NotificationViewModel) {
         modelController.githubClient.client
             .send(V3ReleaseRequest(owner: model.owner, repo: model.repo, id: release)) { [weak self] result in
                 switch result {
                 case .success(let response):
                     self?.viewController?.presentRelease(
                         owner: model.owner,
                         repo: model.repo,
                         release: response.data.tagName
                     )
                 case .failure(let error):
                     Squawk.show(error: error)
                 }
         }
     }
 
 }
