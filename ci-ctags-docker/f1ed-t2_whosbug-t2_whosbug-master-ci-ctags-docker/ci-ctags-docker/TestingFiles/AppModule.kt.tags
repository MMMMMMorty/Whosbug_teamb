!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
AppModule	AppModule.kt	/^class AppModule {$/;"	c
android.content.ClipboardManager	AppModule.kt	/^import android.content.ClipboardManager$/;"	I
android.content.Context	AppModule.kt	/^import android.content.Context$/;"	I
android.net.ConnectivityManager	AppModule.kt	/^import android.net.ConnectivityManager$/;"	I
android.net.wifi.WifiManager	AppModule.kt	/^import android.net.wifi.WifiManager$/;"	I
com.google.samples.apps.iosched.MainApplication	AppModule.kt	/^import com.google.samples.apps.iosched.MainApplication$/;"	I
com.google.samples.apps.iosched.di	AppModule.kt	/^package com.google.samples.apps.iosched.di$/;"	p
com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper	AppModule.kt	/^import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper$/;"	I
com.google.samples.apps.iosched.shared.data.agenda.AgendaRepository	AppModule.kt	/^import com.google.samples.apps.iosched.shared.data.agenda.AgendaRepository$/;"	I
com.google.samples.apps.iosched.shared.data.agenda.DefaultAgendaRepository	AppModule.kt	/^import com.google.samples.apps.iosched.shared.data.agenda.DefaultAgendaRepository$/;"	I
com.google.samples.apps.iosched.shared.data.config.AppConfigDataSource	AppModule.kt	/^import com.google.samples.apps.iosched.shared.data.config.AppConfigDataSource$/;"	I
com.google.samples.apps.iosched.shared.data.db.AppDatabase	AppModule.kt	/^import com.google.samples.apps.iosched.shared.data.db.AppDatabase$/;"	I
com.google.samples.apps.iosched.shared.data.prefs.PreferenceStorage	AppModule.kt	/^import com.google.samples.apps.iosched.shared.data.prefs.PreferenceStorage$/;"	I
com.google.samples.apps.iosched.shared.data.prefs.SharedPreferenceStorage	AppModule.kt	/^import com.google.samples.apps.iosched.shared.data.prefs.SharedPreferenceStorage$/;"	I
com.google.samples.apps.iosched.shared.di.MainThreadHandler	AppModule.kt	/^import com.google.samples.apps.iosched.shared.di.MainThreadHandler$/;"	I
com.google.samples.apps.iosched.shared.domain.internal.IOSchedHandler	AppModule.kt	/^import com.google.samples.apps.iosched.shared.domain.internal.IOSchedHandler$/;"	I
com.google.samples.apps.iosched.shared.domain.internal.IOSchedMainHandler	AppModule.kt	/^import com.google.samples.apps.iosched.shared.domain.internal.IOSchedMainHandler$/;"	I
com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate	AppModule.kt	/^import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate$/;"	I
com.google.samples.apps.iosched.util.FirebaseAnalyticsHelper	AppModule.kt	/^import com.google.samples.apps.iosched.util.FirebaseAnalyticsHelper$/;"	I
dagger.Module	AppModule.kt	/^import dagger.Module$/;"	I
dagger.Provides	AppModule.kt	/^import dagger.Provides$/;"	I
javax.inject.Singleton	AppModule.kt	/^import javax.inject.Singleton$/;"	I
provideAgendaRepository	AppModule.kt	/^    fun provideAgendaRepository(appConfigDataSource: AppConfigDataSource): AgendaRepository =$/;"	m
provideContext	AppModule.kt	/^    fun provideContext(application: MainApplication): Context {$/;"	m
providesAnalyticsHelper	AppModule.kt	/^    fun providesAnalyticsHelper($/;"	m
providesAppDatabase	AppModule.kt	/^    fun providesAppDatabase(context: Context): AppDatabase = AppDatabase.buildDatabase(context)$/;"	m
providesClipboardManager	AppModule.kt	/^    fun providesClipboardManager(context: Context): ClipboardManager =$/;"	m
providesConnectivityManager	AppModule.kt	/^    fun providesConnectivityManager(context: Context): ConnectivityManager =$/;"	m
providesMainThreadHandler	AppModule.kt	/^    fun providesMainThreadHandler(): IOSchedHandler = IOSchedMainHandler()$/;"	m
providesPreferenceStorage	AppModule.kt	/^    fun providesPreferenceStorage(context: Context): PreferenceStorage =$/;"	m
providesWifiManager	AppModule.kt	/^    fun providesWifiManager(context: Context): WifiManager =$/;"	m
